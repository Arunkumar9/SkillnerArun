<?php
/**
 * Auto generated by prado-cli.php on 2010-02-02 01:01:57.
 * generateAll Application.model.schema . soap F AR
 * generateRec table Application.model.schema.CLASS
 */
Prado::using('DefinitionAR');
class DefinitionRecord extends DefinitionAR
{
        const RELDEFS = 'definitions.uid IN (SELECT uid FROM definitions_has_definitions dd1 WHERE dd1.definitions_id = :relid AND 1 != (SELECT value FROM definitions WHERE class = "classes" AND name = :name)
                                 UNION
                                 SELECT definitions_id as uid FROM definitions_has_definitions dd2 WHERE dd2.uid = :uid) ';
        public $definitions_id;
        protected $_UpdateRoles;
	protected $_UpdateOrderStates;
        protected $_UpdateRelatedDefs;
        protected $_myrelateddefs;
        protected $_myrelatedclasses;

	public static $RELATIONS=array
        (
		'roles'=>array(self::MANY_TO_MANY, 'RoleRecord', 'roles_has_definitions'),
		'relateddefs'=>array(self::MANY_TO_MANY, 'DefinitionRecord', 'definitions_has_definitions.definitions_id'),
        );


     /*   public function setRelatedDefs($value)
        {
            $this->_myrelateddefs = $value;
        }
*/
        public function getRelatedDefs()
        {
            if ($this->_myrelateddefs === null)
            {
                $cri = new TActiveRecordCriteria;
                $cri->Condition = self::RELDEFS;
                $cri->Parameters[':uid'] = $this->uid;
                $cri->Parameters[':relid'] = $this->uid;
                $cri->Parameters[':name'] = $this->class;
                $this->_myrelateddefs = DefinitionRecord::finder()->findAll($cri);
            }
            return $this->_myrelateddefs;
        }

        public function getRelatedClassesList()
        {
                $list = array();
		foreach($this->getRelatedDefs() as $r)
		{
                    if ($r->class != $this->class && !in_array($r->class, $list))
                        $list[] =  $r->class;
		}
		return $list;
        }

        /**
	 * Saves data into the table. Relation updates are costly, so save only if update requested
	 */
	public function save()
	{
		parent::save();
		if (true || $this->getUpdateRoles())
			$this->saveRelation('roles');

                return;
		//if ($this->getUpdateOrderStates())
		//	$this->saveRelation('orderstates');

                if ($this->getUpdateRelatedDefs())
			$this->saveRelationSymetric('relateddefs');
	}

	/**
	 * getter for $_UpdateRelatedDefs
	 * @return bool
	 */
	public function getUpdateRelatedDefs()
	{
		return $this->_UpdateRelatedDefs;
	}

	/**
	 * setter for $_UpdateRelatedDefs
	 * @param bool
	 */
	public function setUpdateRelatedDefs($value)
	{
		$this->_UpdateRelatedDefs = TPropertyValue::ensureBoolean($value);
	}


	/**
	 * getter for $_UpdateRoles
	 * @return bool
	 */
	public function getUpdateRoles()
	{
		return $this->_UpdateRoles;
	}

	/**
	 * setter for $_UpdateRoles
	 * @param bool
	 */
	public function setUpdateRoles($value)
	{
		$this->_UpdateRoles = TPropertyValue::ensureBoolean($value);
	}

        /**
	 * getter for $_UpdateOrderStates
	 * @return bool
	 */
	public function getUpdateOrderStates()
	{
		return $this->_UpdateOrderStates;
	}

        public function getSecurityCriteriaOld()
        {
            $user = Prado::getApplication()->getUser();
            $rdeny = implode(',',$user->getRoles['deny']);
            $rallow = implode(',',$user->getRoles['allow']);
            $cri = new TActiveRecordCriteria();
            $cri->Condition = "
            EXISTS( SELECT * FROM roles_has_definitions rr WHERE rr.roles_id in($rdeny) AND r.uid = rr.resources_id ) AND
            NOT EXISTS( SELECT * FROM roles_has_definitions rr WHERE rr.roles_id in($rallow) AND r.uid = rr.resources_id );
            ";
            return $cri;

        }

	/**
	 * setter for $_UpdateOrderStates
	 * @param bool
	 */
	public function setUpdateOrderStates($value)
	{
		$this->_UpdateOrderStates = TPropertyValue::ensureBoolean($value);
	}


        public function getNameValue()
        {
            return $this->name.' / '.$this->value;
        }

        public function getClassName()
        {
            return $this->class.'::'.$this->name;
        }
/*
        public function getNameFilesystemDamaged()
        {
            $val = ($this->value) ? '(DAMAGED)' : '(OK)';
            return $this->name.' '.$val;
        }

        public function getFilesystemDamaged()
        {
            return ($this->value) ? 'icon-damage' : 'icon-tick';
        }
*/
        public function setNameLang($value,$culture)
	{
	}

	public function getNameLang($culture)
	{
		$g =  Prado::getApplication()->getGlobalization();
		$oc = $g->getCulture();
		$g->setCulture(strtolower($culture));
		$val =  Prado::localize($this->name);
		$g->setCulture(strtolower($oc));
		return $val;

	}

	public static function finder($className=__CLASS__)
	{
		return parent::finder($className);
	}

        protected function getSecurityCriteria()
        {
                 return new TActiveRecordCriteria('(1=1)');
             $user = Prado::getApplication()->getUser();
             if ($user->getIsAdmin())
                 return new TActiveRecordCriteria('(1=1)');

             $rallow = implode(',',$user->Roles['allow']);

             $rdeny = implode(',',$user->Roles['deny']);
             $cri =  new TActiveRecordCriteria();   
             $cri->Condition = "( EXISTS (SELECT roles_id FROM roles_has_definitions dr WHERE dr.roles_id IN ($rallow) AND dr.definitions_id = definitions.uid) ".
                               "OR NOT EXISTS (SELECT roles_id FROM roles_has_definitions dr WHERE dr.definitions_id = definitions.uid) ) ";
             return $cri;
        }
    public function saveRelationSymetric($rel)
    {
        $RELATIONS = $this->getStaticVar('RELATIONS');
        $table = constant($RELATIONS[$rel][1].'::TABLE');
        $mytable = $this->getConstant('TABLE');
        list($reltable,$field) = explode('.',$RELATIONS[$rel][2]);

        if (!$reltable) return;
        if ($field)
        {
          $myfield = 'uid';
        }
        else {
          $myfield = $mytable.'_id';
          $field = $table.'_id';
        }

        $conn = $this->getDbConnection();
        $conn->setActive(true);
        $cmd = $conn->createCommand("DELETE FROM ${reltable} WHERE ${myfield} = :uid");
        $cmd->bindValue(':uid', $this->uid);
        $cmd->execute();
        $cmd = $conn->createCommand("DELETE FROM ${reltable} WHERE ${field} = :uid AND 1 != (SELECT value FROM definitions WHERE class = 'classes' AND name = :name)");
        $cmd->bindValue(':uid', $this->uid);
        $cmd->bindValue(':name', $this->class);
        $cmd->execute();

        foreach ($this->$rel as $relation)
        {
	        $cmd = $conn->createCommand("INSERT  IGNORE ${reltable} (${field}, ${myfield}) VALUES (:relid, :uid)");
	        $cmd->bindValue(':uid', $this->uid);
	        $cmd->bindValue(':relid', $relation->uid);
	        $cmd->execute();
		}
    }

}