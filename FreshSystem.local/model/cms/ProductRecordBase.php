<?php
/**
 * Auto generated by prado-cli.php on 2008-07-11 12:26:36.
 */
class ProductRecordBase extends ProductAR implements FTypedActiveRecord
{
	const DETAIL_PAGE = 'ShopDetailPage';
	protected $_typedata;
	protected $_update_categories;

	/**
	 * Getter for property CoolUrl
	 * cool url for product
	 * @return string
	 */
	public function getCoolUrlName() {

	    if ($this->SKU)
		return $this->SKU;
	    elseif (Prado::getApplication()->Parameters['translatable'])
		return FU::urlify($this->nameLangAct);
	    else
		return FU::urlify($this->name);

	}

	/**
	 * Setter for property CoolUrl
	 * cool url for product
	 * @param $value string
	 */
	public function setCoolUrlName($value) {
	    $this->SKU = $value;
	}

	public function getCatID()
	{
		return sprintf('%03d',$this->uid).'-'.$this->getCoolUrlName();
	}


	public static $RELATIONS=array
    (
		'categories'=>array(self::MANY_TO_MANY, 'CategoryRecord', 'products_categories'),
		'terms'=>array(self::HAS_MANY, 'TermRecord')
    );

	public static function finder($className=__CLASS__)
	{
		return parent::finder($className);
	}

	public function getChildren()
	{
		return false;
	}
	
    public function save()
    {
		parent::save();
		if ($this->updateCategories)
			$this->saveCategories();
    }
	
 	public function getUpdateCategories()
	{
		return $this->_update_categories;
	}	
	
 	public function setUpdateCategories($value)
	{
		$this->_update_categories = TPropertyValue::ensureBoolean($value);
	}	

   
    public function saveCategories()
    {
		$conn = $this->getDbConnection();
        $conn->setActive(true);
        $cmd = $conn->createCommand("DELETE FROM products_categories WHERE product_id = :prodid");
        $cmd->bindValue(':prodid', $this->uid);
        $cmd->execute();
        foreach ($this->categories as $category)
        {
	        $cmd = $conn->createCommand("INSERT IGNORE products_categories(product_id, category_id) VALUES (:prodid, :catid)");
	        $cmd->bindValue(':prodid', $this->uid);
	        $cmd->bindValue(':catid', $category->uid);
	        $cmd->execute();
		}
    }

	public function getCategoriesList()
	{
		$list = array();
		foreach($this->categories as $category)	
		{
			$list[] = (integer) $category->uid;
		}
		return $list;
	}

	public function getFirstImage()
	{
			//
		if (($list = $this->ImagesList) && $list[0]) 
		{
			
			//var_dump($list); die();
			return $list[0]->uid;
		}
		return false;
	}

	public function getImagesList()
	{
			//
		if ($this->images) 
		{
			$images = json_decode($this->images);
			return $images;
		}
		return array();
	}
	
	public function getImagesRecords() {

        $images = json_decode($this->images,true);
		$result = array();
		if (count($images))
		{
			foreach($images as $image)
				$result[] = new NewsImagesRecord($image);
		}
		return $result;
			
    }

	public function setCategoriesList($value)
	{
		$this->categories = array();
		$this->categories = CategoryRecord::finder()->findAllByPks($value);
	}

	public function getType() 
	{
		$types = TypeRecord::getTypes();
		return $types[self::DETAIL_PAGE];
	}

	public function getTypeData($inherit = false)
	{
		
		if ($this instanceof FTypedActiveRecord)
		{
			if ($this->_typedata === null)
			{
				$typeData = $this->getType()->data;
				$typeData['name'] = $this->type->name;
				$this->_typedata = $typeData;
			}
			return $this->_typedata;
			
		} else {
			return array();
		}
	}
	
	public function setTypeData($key, $value)
	{
		if ($this instanceof FTypedActiveRecord && $key)
		{
			$this->type->data[$key] = $value;
		}	
	}
	
	public function unsetTypeData($key)
	{
		if ($this instanceof FTypedActiveRecord && $key)
		{
			unset($this->type->data[$key]);
		}	
	}

	public function getHref($inherit = false,$par=array())
	{
		if ($this->getCatID())
		{
	   		$typeData = $this->getTypeData();
			$params  = (is_array($typeData['pageParams']))?$typeData['pageParams']:array();
			$params = array_merge($params,$par);
			$params['catid']=$this->getCatID();
			return Prado::getApplication()->getRequest()->constructUrl('page',$typeData['pagePath'],$params);
		}
		else
			return null;
	}

	public function getFirstImageAbsoluteUrl()
	{
	    $baseUrl = Prado::getApplication()->getRequest()->getBaseUrl();
	    return $baseUrl.'/'.$this->getFirstImage();
	}

	public function getDetailUrl()
	{
		$request = Prado::getApplication()->getRequest();
		$baseUrl = $request->getBaseUrl();
		return $baseUrl.$this->getHref();//$request->constructUrl('page',$pagePath,array('catid'=>$this->CatID));
	}

	public function getPlainDescription()
	{
	    return strip_tags($this->description);
	}
}
?>