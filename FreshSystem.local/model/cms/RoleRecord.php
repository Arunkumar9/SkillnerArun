<?php
/**
 * Auto generated by prado-cli.php on 2010-02-09 10:43:49.
 * generateAll Application.model.schema . soap F AR
 * generateRec table Application.model.schema.CLASS
 */
class RoleRecord extends RoleAR
{
        protected static $_ar;
        public $level=0;
	protected $_UpdateUsers;

	public static $RELATIONS=array
        (
           'children' => array(self::HAS_MANY, 'RoleRecord', 'parent_id'),
           'parent' => array(self::BELONGS_TO, 'RoleRecord', 'parent_id'),
           'users'=>array(self::MANY_TO_MANY, 'UserRecord', 'user_has_roles'),
        );

        public static function finder($className=__CLASS__)
	{
		return parent::finder($className);
	}

        

	/**
	 * Saves data into the table. Relation updates are costly, so save only if update requested
	 */
	public function save()
	{
		parent::save();

                if (is_array($this->users))
			$this->saveRelation('users');
	}


	public function getUsersList()
	{
		$list = array();
		foreach($this->users as $user)
		{
			$list[] = (integer) $user->uid;
		}
		return $list;
	}

        public function setUsersList($value)
	{
		$this->users = array();
		$this->users = UserRecord::finder()->findAllByPks($value);
	}

        public function saveUsers()
        {
	$conn = $this->getDbConnection();
        $conn->setActive(true);
        $cmd = $conn->createCommand("DELETE FROM user_has_roles WHERE roles_id = :roleid");
        $cmd->bindValue(':roleid', $this->uid);
        $cmd->execute();
        foreach ($this->users as $user)
        {

            $cmd = $conn->createCommand("INSERT IGNORE user_has_roles (roles_id, user_id) VALUES (:roleid, :userid)");
	        $cmd->bindValue(':roleid', $this->uid);
	        $cmd->bindValue(':userid', $user->uid);
	        $cmd->execute();
		}
        }
        /**
	 * getter for $_UpdateUsers
	 * @return bool
	 */
	public function getUpdateUsers()
	{
		return $this->_UpdateUsers;
	}

	/**
	 * setter for $_UpdateUsers
	 * @param bool
	 */
	public function setUpdateUsers($value)
	{
		$this->_UpdateUsers = $value;
	}

	public function getIsFolder()
	{
		return true;
	}

	public function setIsFolder($value) {}

        public function getSortName()
        {
            if ($this->name == 'Recycle Bin')
                return 'zzzzzzzzzzzzzz';
            else
                return $this->name;
        }

        public function getMenuType()
        {
            if ($this->name == 'Recycle Bin')
                return 'recycleBin';
            elseif ($this->getIsFolder())
                return 'folder';
            else
                return 'any';
        }

        public function getNodeType()
        {
            if ($this->uid == 1)
                return 'recycleBin';
            elseif ($this->getIsFolder())
                return 'folder';
            else
                return 'leaf';
        }

        public function getSortLeaf()
        {
            return ($this->name == 'Recycle Bin');
        }

	public function setNameLang($value,$culture)
	{
	}

	public function getNameLang($culture)
	{
		$g =  Prado::getApplication()->getGlobalization();
		$oc = $g->getCulture();
		$g->setCulture(strtolower($culture));
		$val =  Prado::localize($this->name);
		$g->setCulture(strtolower($oc));
		return $val;

	}

        public function getRolePath()
        {
            $roles = self::getAncestorRoles($this->uid);
            foreach($roles as $role)
            {
                $path[] = $role->name;
                
            }
            $path[] = $this->name;
            return implode('::',$path);
        }

        public static function getAllRoles()
        {
            if (!self::$_ar)
            {
                self::$_ar = array();
                foreach( self::finder()->findAll() as $role)
                {
                    self::$_ar[$role->uid] = $role;
                    self::$_ar['names'][$role->name] = $role;
                }
            }
            return self::$_ar;
        }


        public static function getAncestorRoles($id,$depth=null)
        {
            $roles = self::getAllRoles();
            $parent = $roles[$id]->parent;
            while($parent ) //&& ($depth>0 || $depth === null)
            {
                $anc[$parent->uid] = $parent;
                $parent = $parent->parent_id;
                $depth--;
            }
            return $anc;
        }

}