#
# Grid with cuepoints view
#
#
name: cuepoints-view
serverSide:
    allowedGrids: cuepoints-grid
    recordClass: CuepointRecord
    noBlankContext: false
    condition: "(1=0)"
    context:
        videos-grid:
            condition: "videos_id = '%filter%' AND ishidden=0"
        video-form:
            condition: "videos_id = '%filter%' AND ishidden=0"
        video-form-store:
            action: updateRecordsFB
            dataRoot: rows
            mapRequest:
                filter: videos_id
            successMsg: <%[ Cuepoints saved ok.]%>
            errors:
              -  regexp: "/1062 Duplicate entry '(.*?)' /"
                 text: <%[ Cannot enter row with duplicate value %1$s.]%>
        cuepoints-grid-store:
            action: updateRecords
            dataRoot: rows
            mapRequest:
                filter: videos_id
            successMsg: <%[ Cuepoints saved ok.]%>
            errors:
              -  regexp: "/1062 Duplicate entry '(.*?)' /"
                 text: <%[ Cannot enter row with duplicate value %1$s.]%>
        cuepoints-grid-delete:
            action: callMethod
            method: deleteRecords
            recordClass: CuepointRecord
            dataRoot: rows
            successMsg: <%[Selected rows deleted ok!]%>
            errors:
              -  regexp: "/General error: 1451/"
                 text: <%[Cannot delete row.]%>
    sortInfo:
        field:
          start: ASC
          name: ASC
metaData:
    root: rows
    id: uid
    totalProperty: totalCount
    remoteSort: false
    xxxgroupField: name
    sortInfo:
        field:  startFormated
        direction: ASC
    fields:
        -    name: uid
        -    name: name
             defValue:'CH'
        -    name: description
        -    name: transcript
        -    name: videos_id
        -    name: startFormated
        	 defValue:'00:00:00'
        -    name: stopFormated
             defValue:'00:00:00'
        -    name: is_enabled
             type: int
        -    name: skippable
        	 type: int
        -    name: buttonposition
        	 defValue:'Right bottom'
        -    name: isActive
    context:
      base:
          cm:
            -	 >
                 ^new Ext.grid.CheckboxSelectionModel({
                    checkOnly:true,
                    listeners: {
						rowselect: function( comp, rowIndex, record) {
							if(record.data.isActive == 1){
								comp.grid.getSelectionModel().deselectRow(rowIndex);
								record.data.isActive = 0;
								var header = '<div class="x-grid3-hd-tag">&#160;</div>';
   	   				    		comp.grid.getColumnModel().setColumnHeader(0,header);
							} else {
								record.data.isActive = 1;
								comp.grid.getSelectionModel().selectRow(rowIndex,true);
							}
							if(comp.grid.getSelectionModel().selections.length == comp.grid.store.data.length){
								var header = '<div class="x-grid3-row-checker" style="background-position: -23px 1px;">&#160;</div>';
   	   				    		comp.grid.getColumnModel().setColumnHeader(0,header);
   	   				    	}
						},
						rowdeselect: function( comp, rowIndex, record ){
							if(record.data.isActive != 1){
								comp.grid.getSelectionModel().selectRow(rowIndex,true);
								record.data.isActive = 1;
								if(comp.grid.getSelectionModel().selections.length == comp.grid.store.data.length){
									var header = '<div class="x-grid3-row-checker" style="background-position: -23px 1px;">&#160;</div>';
   	   				    			comp.grid.getColumnModel().setColumnHeader(0,header);
   	   				    			return;
   	   				    		}
							} else {
								record.data.isActive = 0;
								comp.grid.getSelectionModel().deselectRow(rowIndex);
							}
							var header = '<div class="x-grid3-hd-tag">&#160;</div>';
   	   				    	comp.grid.getColumnModel().setColumnHeader(0,header);
						}
				    }
            	 })
            -    ^Fresh.global.chaptersRowExpander
            -    header: <%[ Name ]%>
                 width: 40
                 sortable: false
                 dataIndex: description
                 editor:
                    xtype: textfield
            -    header: <%[ Start ]%>
                 sortable: false
                 dataIndex: startFormated
                 align: center
                 width: 20
                 editor:
                    xtype: textfield
                    allowBlank: false
                    vtype:'cuepointtime'
                    listeners:
           				change:
    						fn: >
           						^function( comp ){
           							   var timeTest = /^([0-9][0-9]|[0-9]):([0-5][0-9]|[0-9]):([0-5][0-9]|[0-9])$/i;
           							   var result = timeTest.test(comp.getValue());
           							   var grid = Ext.getCmp('cuepoints-grid');
           							   grid.isVisitedGridChange = true;
           							   var columnIndex = grid.mcColumnIndex;
       							   	   var rowIndex    = grid.mcRowIndex;
           							   var desiredCell = grid.getView().getCell(rowIndex,columnIndex);
           							   var str = Ext.StoreMgr.lookup( "cuepoints-store" );
						               var selection= grid.getSelectionModel().selections; 
								       if(selection.length == 0){
						               		comp.gridEditor.record.set('startFormated',comp.getValue() );
						                	selection.items.push(comp.gridEditor.record);
								       }
    								   if(result){
    								   	   var selection= grid.getSelectionModel().selections; 
							               var actualVal = comp.getValue();
							               if(actualVal){
							               		var actualValArray = actualVal.split(':');
												var temp = 0;
							               		if(actualValArray[0].length < 2){
							               			finalVal = ((temp.toString()).concat(actualValArray[0])).concat(':');
							               		}else {
							               			finalVal = actualValArray[0].concat(':');
							               		}
											    if(actualValArray[1].length < 2){
							               			finalVal = finalVal.concat(((temp.toString()).concat(actualValArray[1])).concat(':'));
							               		}else {
							               			finalVal = finalVal.concat(actualValArray[1]).concat(':');
							               		}
							               		if(actualValArray[2].length < 2){
							               			finalVal = finalVal.concat(((temp.toString()).concat(actualValArray[2])));
							               		}else {
							               			finalVal = finalVal.concat(actualValArray[2]);
							               		}
	           							   		str.data.items[rowIndex].set('startFormated', finalVal);
	           							   		str.sort("startFormated","ASC");
	           							   		grid.fireEvent('identifyErrorCell',grid); 
	           							   }
    								   }else{
	           							   		desiredCell.className = desiredCell.className.replace( /(?:^|\s)cell-incorrect-data(?!\S)/g , '' );
	           							   		desiredCell.className += " cell-incorrect-data";
	           							   		Ext.getCmp('video-form-save-button').setDisabled(true);
	 											Ext.getCmp('video-form-finalize-button').setDisabled(true);
	           							   		str.data.items[rowIndex].set('startFormated', comp.getValue());
	           							   		grid.fireEvent('identifyErrorCell',grid);
			           				   }
			           				   grid.enterEventClicked = false;
           						}
						specialkey:
						        fn: >
						            ^function(comp,e){
						            	if (e.getKey() == e.ENTER) {
						            			var grid = Ext.getCmp('cuepoints-grid');
						            			grid.enterEventClicked = true;
   						 				 }
						            }
            - xtype: checkcolumn
				header: Skippable
				dataIndex: skippable
				value: 1
				align: center
				width: 20
end: true

