<?php
/**
 * Auto generated by prado-cli.php on 2008-04-17 01:03:11.
 * Task/Issue      Author    			UniqueID        Comment   
 *---------------------------------------------------------------------------------------------------------------------------------------------------
 *  22555          Arunkumar.muddada    201311111248    Modified :  generateContentUrl($data)
 *  														if $courseInstanceRecords is exists then only we are setting the "activated" value  
 *  23339		   Arunkumar.muddada    201311290943	Modified :	updateContentDetails ($data)
 *  														Modified Code in such a way that it will allow to change the message details when instructor is changed
 *  27148          Arunkumar.muddada    201404150531	Added : activateMessagingWindow	:
 *  														This method is useful to check the mandatory input parameters and course instance details
 *  														then this method will call getMessageWindowURL method that will return the message window URL
 *  													Added : getMessageWindowURL :
 *  														This method is useful for Checking the course instance and then after validateing the ActiveURL Record
 *  													Added : checkActiveURLValidation :
 *  														This method is useful for finding Actvice URL record related to this course instance ,
 *  														If it is not able to find one then it will create a new Active URL record if the course instance is not expired.
 *  													Added : checkCourseInstanceValidation :
 *  														This method is useful to check course_details table entry(Course instance) is expired or not
 *  													Added : getMessageUrl()	:
 *  														Method to prepare the Messate window URL to access directly from the emails
 *  28134          Arunkumar.muddada	201405300834    Modified : createUser,udpateUserDetails
 *  													Checking the role passed by the bss and placeing the respective value in the user_has_roles table							 
 */
class ActiveUrlRecord extends ActiveUrlAR
{
	
	public function getUser() {
		SWPLogManager::log("Getting user by user id",null,TLogger::INFO,$this,"getUser","SWP");
		return UserRecord::finder()->findByPk($this->user_id);	
	}
	
	public function findByValidUrl($url, $fromFuser ) {
		SWPLogManager::log("Find users by url",array("url"=>$url,"From_F_user"=>$fromFuser),TLogger::INFO,$this,"findByValidUrl","SWP");
		if ( $fromFuser ){
			$activeURL = $this->find(' url = ?',array($url));	
			SWPLogManager::log("Find users by url",$activeURL,TLogger::INFO,$this,"findByValidUrl","SWP");
			return  $activeURL;			
		} else {
			$activeURL = $this->find('activated <= UNIX_TIMESTAMP() AND expire >= UNIX_TIMESTAMP() AND url = ?',array($url));
			SWPLogManager::log("Returns activated or expire url",$activeURL,TLogger::INDO,$this,"findByValidUrl","SWP");
			return $activeURL;	
		}
		
	}
	
	public function generateUserUrl($data) {
		SWPLogManager::log("Generating url for user",array("data"=>$data),TLogger::INFO,$this,"generateUserUrl","SWP");
		extract($data);
		$data['company_level'] = ($data['company_level'] == 'Y' ? 1 : 0 );
		if (!($aurl = $this->find('activated <= ? AND expire >= ? AND user_id = ? AND content_id IS null',array(time(),time(),$user_id))))
		{				
			$user = $this->setupUser($user_id,$user_name,2,$zoneids,$data['company_id'],$data['company_level']);					
			$aurl = new ActiveUrlRecord;
			SWPLogManager::log("New instance for active url record",$aurl,TLogger::DEBUG,$this,"generateUserUrl","SWP");
			$aurl->user_id = $user_id;
			
		} else {
			$user = $this->setupUser($user_id,$user_name,2,$zoneids,$data['company_id'],$data['company_level']);			
		}
		$this->changeCompanyOfUser($user_id,$data['company_id']);
		$aurl->activated = ($activated) ? $activated : time();
		$aurl->expire = ($expire) ? $expire : strtotime('+ 1 day');
		$url = sha1($user->username.':'.microtime());
		$aurl->url = $url;
		$aurl->save();
		SWPLogManager::log("Returns admin url",$aurl->getAdminUrl(),TLogger::INFO,$this,"generateUserUrl","SWP");
		return $aurl->getAdminUrl();
				
	}
	/**
	 * This method is useful to update the company parameter in to the videos ,  products , cms_containers tables 
	 * @param String $user_id      (value in UserName column of the be_users table) .
	 * @param Integer $company_id
	 */
	public function changeCompanyOfUser($user_id , $company_id=1) {
	  SWPLogManager::log("Company Parameter updation to the  videos ,  products , cms_containers tables Input we got",array("User_id"=>$user_id,"company_id"=>$company_id),TLogger::INFO,$this,"changeCompanyOfUser","SWP");
	  
	  try {
		  if(!empty( $user_id ) ){
		  		//Update Videos (Lessions and Quizes we create should be under one company)
	            $videosSql   = "SELECT * FROM videos  WHERE user_id ='".$user_id."'" ;
			 	$videosList = TActiveRecord::finder('VideoRecordBase')->findAllBySql($videosSql);
			 	if(count($videosList)) {
			 		foreach($videosList as $video) {
			 			$video->company_id = $company_id;
			 			$video->save();
			 		}
			 	}
			 	
			 	//Update produts (Courses which we create should be under one company)
		  		$productsSql   = "SELECT * FROM products  WHERE user_id ='".$user_id."'";
			 	$productsList = TActiveRecord::finder('ProductRecord')->findAllBySql($productsSql);
			 	if(count($productsList)) {
			 		foreach($productsList as $product) {
			 			$product->company_id = $company_id;
			 			$product->save();
			 		}
			 	}
	      }
	  }catch (Exception $e){
		 SWPLogManager::log("We Got Some SQL Error While Executing SQL => Error  : ",array("Error Message"=>$e->getMessage()),TLogger::ERROR,$this,"changeCompanyOfUser","SWP");
	  }
	}

	public function updateUser($data) {
		SWPLogManager::log("Update User details",array("data"=>$data),TLogger::INFO,$this,"updateUser","SWP");
		extract($data);
		$user = $this->setupUser($user_id,$user_name,2,$zoneids,$data['company_id'],$data['company_level']);
		SWPLogManager::log("Returns user name",$user->username,TLogger::INFO,$this,"updateUser","SWP");
		return $user->username;
	}
	
	protected function setupUser($user_id,$user_name,$role,$zoneids=null,$company_id,$company_level) {
		SWPLogManager::log("Setup a user",array("User id"=>$user_id, "User name"=>$user_name, "User role"=>$role, "Zone id"=>zoneids, "Company id"=>$company_id, "Level of company"=>$company_level),TLogger::INFO,$this,"setupUser","SWP");
			if (!($user = UserRecord::finder()->findByUsername($user_id))) {
				$user = new UserRecord;
				$user->Username = $user_id;
				$user->Name = $user_name;
				$user->Email = '';
				if ($zoneids !== null)
					$user->zoneIDs = $zoneids;
				$user->Password = '';
				$user->Created = time();
				$user->Updated = time();
				$user->LastDate = time();
				$user->LastIP = Prado::getApplication()->Request->UserHostAddress;
				$user->setUpdateRoles(true);
				$user->rolesAsList = array($role);
				if($company_id != 0) {
				             $user->company_id = $company_id;
				}
				$user->company_level = $company_level;
				SWPLogManager::log("User object",$user,TLogger::DEBUG,$this,"setupUser","SWP");
				$user->save();
			}
			
			if ($zoneids !== null) {
				$user->zoneIDs = $zoneids;
				$user->Name = $user_name;
				$user->saveZones();
				if($company_id != 0) {
				   $user->company_id = $company_id;
				}
				$user->company_level =  $company_level;
				$user->save();				
			} else {
				$user->Name = $user_name;
				if($company_id != 0) {
				   $user->company_id = $company_id;
				}
				$user->company_level =  $company_level;
				$user->save();				
			}
			SWPLogManager::log("Returns user",$user,TLogger::INFO,$this,"setupUser","SWP");
			return $user;
	}
	
	/**
	 * updates  the existing user.
	 * 
	 * @param unknown_type $data
	 *  $data should contains
	 *   1.user_id - mandatory
	 *   3.email 
	 *   4. photo
	 *   5.user_name
	 *   6.zoneids
	 * @return multitype:boolean string
	 */
	public function udpateUserDetails( $data ){
		SWPLogManager::log("Update user details",array("data"=>$data),TLogger::INFO,$this,"udpateUserDetails","SWP");
		if( isset($data['user_id'] ) ){
			extract( $data );
			if (($user = UserRecord::finder()->findByUsername($user_id))) {
				
				$user->Name = $user_name;
				$company_id =$data['company_id'];
				//201405300834
				//Checking the role passed by the bss and placeing the respective value in the user_has_roles table
				if(! empty( $role ) ){
					if( $role =='instructor' ){
					$role =24; //instructur role
					}else if($role =='Creator' || $role =='creator' ){
						$role =35;
					}else{
						$role =3;
					}
					
					$user->setUpdateRoles(true);
					$user->rolesAsList = array($role);
				}
				if($company_id != 0) {
				      $user->company_id = $company_id;
				}
				$user->company_level =  $data['company_level'];
				if( $email ){
						
					$user->Email = $email;
				}
				if ($zoneids !== null) {
					$user->zoneIDs = $zoneids;
					$user->Name = $user_name;
					$user->saveZones();
				} 
				
				if( $photo ){
					$user->photo = $photo;
				}
				
				if(!empty($timezone)){
                  $user->timezone=$timezone;
				}
				$user->save();
				SWPLogManager::log("Returns update status and message",array('success'=>true ,'Message'=> ' User Updated sucessfully '),TLogger::INFO,$this,"udpateUserDetails","SWP");
				return array('success'=>true ,'Message'=> ' User Updated sucessfully ');
				
			}else{
				SWPLogManager::log("Returns update status and message",array('success'=>false ,'Message'=> '  No users exists in the system with the user_id ' . $user_id),TLogger::INFO,$this,"udpateUserDetails","SWP");
				return array('success'=>false ,'Message'=> '  No users exists in the system with the user_id ' . $user_id);
			}
			
		}else{
			 SWPLogManager::log("Returns if user id does not exist",array('success'=>false ,'Message'=> 'user_id is mandatory'),TLogger::INFO,$this,"udpateUserDetails","SWP");
			 return array('success'=>false ,'Message'=> 'user_id is mandatory');
		}
	}
	/**
	 * deletes the user from the system
	 * @param unknown_type $user_id
	 */
	public function deleteUser( $data ){
		SWPLogManager::log("Delete user by user id",array("data"=>$data),TLogger::INFO,$this,"deleteUser","SWP");
		if( isset($data['user_id'] ) ){
				extract( $data );
			if (($user = UserRecord::finder()->findByUsername($user_id))) {
		
				
				$user->delete();
				SWPLogManager::log("Returns user delete status",array('success'=>true ,'Message'=> ' User Deleted sucessfully '),TLogger::INFO,$this,"deleteUser","SWP");
				return array('success'=>true ,'Message'=> ' User Deleted sucessfully ');
		
			}else{
				SWPLogManager::log("Returns if user id does not exist",array('success'=>false ,'Message'=> '  No users exists in the system with the user_id ' . $user_id),TLogger::INFO,$this,"deleteUser","SWP");
				return array('success'=>false ,'Message'=> '  No users exists in the system with the user_id ' . $user_id);
			}
				
		}else{
			SWPLogManager::log("Returns if user id does not exist",array('success'=>false ,'Message'=> 'user_id is mandatory'),TLogger::INFO,$this,"deleteUser","SWP");	
			return array('success'=>false ,'Message'=> 'user_id is mandatory');
		}
	}
	
	/** create  the new user.
	*
	* @param unknown_type $data
	*  $data should contains
	*   1.user_id - mandatory
	*   3.email
	*   4. photo
	*   5.user_name
	*   6.zoneids
	* @return multitype:boolean string
	* */
	
	public function createUser( $data ){
		SWPLogManager::log("Create new user",array("data"=>$data),TLogger::INFO,$this,"createUser","SWP");
		if( isset($data['user_id'] ) ){
			extract( $data);
			
			//Checking the role passed by the bss and placeing the respective value in the user_has_roles table
			if( empty( $role ) ){
				$role =3; // deafult student
			}else{
				if( $role =='instructor' ){
					$role =24; //instructur role
				}else if($role =='Creator' || $role =='creator'){ //201405300834
					$role =35;
				}else{
					$role =3;
				}
			}
			if (!($user = UserRecord::finder()->findByUsername($data['user_id']))) {
				$user = new UserRecord;				
				$user->Username = $data['user_id'];
				$user->Name = $data['user_name'];
				$user->Email = $email;
				if ($zoneids !== null)
					$user->zoneIDs = $zoneids;
				$user->Password = '';
				$user->Created = time();
				$user->Updated = time();
				$user->LastDate = time();
				$user->LastIP = Prado::getApplication()->Request->UserHostAddress;
				$user->setUpdateRoles(true);
				$user->rolesAsList = array($role);
				$user->photo = ( empty( $photo) ? './images/noimage.png' : $photo );
				$company_id = $data['company_id'];
				if($company_id  != 0) {
				              $user->company_id = $company_id;
				}
				$user->company_level = $data['company_level'];
				
				// Here we are checking for the existence of new users time zone value, if not exist
				// then inserting the server time zone value as the users time zone.
				
				if ( empty( $timezone) ){
				
					// Get the server time zone
					$dt = new DateTime();
					$timezone =  $dt->getTimeZone()->getName();
				}
				$user->timezone = $timezone;
				SWPLogManager::log("New user object",$user,TLogger::DEBUG,$this,"createUser","SWP");
				$user->save();
				$this->createUsetSettings($user->Uid);
				SWPLogManager::log("Returns when user created",array('success'=>true ,'Message'=> ' User created sucessfully '),TLogger::INFO,$this,"createUser","SWP");
				return array('success'=>true ,'Message'=> ' User created sucessfully ');
		
			}else{
				SWPLogManager::log("Returns if user already exist",array('success'=>false ,'Message'=> ' user Already exists '),TLogger::INFO,$this,"createUser","SWP");
				return array('success'=>false ,'Message'=> ' user Already exists ');
			}
				
		}else{
			SWPLogManager::log("Returns if user id does not exist",array('success'=>false ,'Message'=> ' user_id is mandatory '),TLogger::INFO,$this,"createUser","SWP");	
			return array('success'=>false ,'Message'=> 'user_id is mandatory');
		}
		
	} 
	
	/**
	 * This method will take care of inserting the settings records to the settings table 
	 * for the user which will come in the parameter.
	 * */
	public function createUsetSettings( $uid ) {
		SWPLogManager::log("Create user set settings",array("data"=>$uid),TLogger::INFO,$this,"createUsetSettings","SWP");
	     $ini_array = parse_ini_file($_SERVER['DOCUMENT_ROOT'].'/images/settings/settings.ini', true);
		 $values = array();
		 foreach($ini_array as $k=>$v){
		 	$values[$k] = $v;
		 }
		 
		$user = Prado::getApplication()->getUser();
		SWPLogManager::log("New object for user",$user,TLogger::DEBUG,$this,"createUsetSettings","SWP");
		 
		 foreach ($values as $value){
		 	$records = UserSettingsRecord::finder()->findAll('`key` = ? AND user_id = ? ',array( $value['name'],$uid) );
		 	
		 	//before create a setting one check should happen if the setting of the ini file has onlyInstructor key as true or false.
			//if true then that particular setting should be created if the user has role instructor.
		 	if(isset($value['onlyInstructor']) && $value['onlyInstructor'] ) {
		 			$userRec = UserRecord::finder()->findByUsername($user->Username);
			 		$userRoles =   $userRec->getExtractedRoles() ;
					if(   in_array('24',$userRoles['all'])   ){
						$this->createUserSetting($records ,$value ,$uid  );
					} 
		 	}
		 	else if(isset($value['onlyStudent']) && $value['onlyStudent'] ) {
		 		// If the log in user is student then only create this settings.
		 			$userRec = UserRecord::finder()->findByUsername($user->Username);
			 		$userRoles =   $userRec->getExtractedRoles() ;
					if(   in_array('3',$userRoles['all'])   ){
						$this->createUserSetting($records ,$value ,$uid  );
					} 
		 	} else {
		 		$this->createUserSetting($records ,$value ,$uid  );
		 	}
		}
		
			
		//Along with this change . if product_id available for the user in this function then query the setting for 
		//this user with content_id as -1 and replace the content_id with the course_id.
		$pid = $user->getProductID();
		$cid = $user->getContentID();   // getContentID() will return either contenetID or 0
		
		if(isset($pid)){ //means product id is available
			$records = UserSettingsRecord::finder()->findAll('content_id = ? AND user_id = ? ',array( -1 ,$uid) );
			foreach ($records as $record){
				$record->content_id = $cid;
				$record->save();
			}
		}
	}
	
	/**
	 * This method is useful to create individual setting for the user , it will be called from the createUsetSettings( $uid ).
	 * @param unknown_type $records
	 * @param unknown_type $value
	 * @param unknown_type $uid
	 */
	public function createUserSetting($records ,$value ,$uid  ) {
		SWPLogManager::log("Create user settings",array("Record"=>$records,"Value"=>$value, "User id"=>$uid),TLogger::INFO,$this,"createUserSetting","SWP");
		$user = Prado::getApplication()->getUser();
		$pid = $user->getProductID();
		$cid = $user->getContentID();   // getContentID() will return either contenetID or 0
		
		//Checking for the existence of the key in the table if not exist then only inserting the record.
		//function is first querying the setting table with the settings key and user_id. 
		//if records exists then it will not create a setting with that key. It was when we have user level settings only. 
		//But now we have course level settings so added else block
	 	if( !count($records) ){
			$ur = new UserSettingsRecord;
  			$ur->user_id    =   $uid;
  			$ur->name 		=	$value['group'];
  			$ur->key		=	$value['name'];
  			$ur->value		=	$value['default'];
  			$ur->enable		=	$value['enable'];
  			$ur->group		=	$value['group'];
  			// if the setting record from the ini file has coursesettings as true then insert a course id to the content_id column of the record.
  			// If course id not available for the user then insert -1 into the content_id column
  			if(isset($value['coursesettings']) && $value['coursesettings']) {
  				if(isset($cid) && $cid ){
  					$ur->content_id =  $cid;
  				} else {
  					$ur->content_id =  -1;
  				}
  			}
  			$ur->save();
  			SWPLogManager::log("User setting object",$ur,TLogger::DEBUG,$this,"createUserSetting","SWP");
	 	} else {
	 		//So after querying the record if record exists then check for the content_id and product_id of the record if exists and not equal to the 
			//current course_id , and setting form Ini says that this is a course setting then create another record with the default values 
			//(which includes course_id and product_id)
			//while creating this. If the user is student and their is no instructor for product then the value of the setting should be false 
			//(i.e disable email notifications )
	 		foreach ($records as $record) {
	 			if(isset($record->content_id) && isset($record->product_id) && ($record->content_id !=  $cid) ) {
	 				//setting form Ini says that this is a course setting then create another record with the default values 
					//(which includes course_id and product_id)
	 				if(isset($value['coursesettings']) && $value['coursesettings']) {
	 					$ur = new UserSettingsRecord;
			  			$ur->user_id    =   $uid;
			  			$ur->name 		=	$value['group'];
			  			$ur->key		=	$value['name'];
			  			$ur->value		=	$value['default'];
			  			$ur->enable		=	$value['enable'];
			  			$ur->group		=	$value['group'];
			  			
			  			if(isset($cid) && $cid ){
			  				$ur->content_id =  $cid;
			  			} else {
			  				$ur->content_id =  -1;
			  			}
			  			
	 					if(isset($pid) && $pid ){
			  				$ur->product_id =  $pid;
			  			} else {
			  				$ur->product_id =  -1;
			  			}
			  			
			  			//while creating this. If the user is student and their is no instructor for product then the value of the setting should be false 
						//(i.e disable email notifications )
			  			$userRec = UserRecord::finder()->findByUsername($user->getUid());
				 		$userRoles =   $userRec->getExtractedRoles() ;
						if(   in_array('3',$userRoles['all'])   ){
							$ur->value		=	false;
						}
			  			
			  			$ur->save();
			  			SWPLogManager::log("User setting object",$ur,TLogger::DEBUG,$this,"createUserSetting","SWP");
	 				}
	 			}
	 		}
	 	}
	}
	
	
	public function generateContentUrl($data) {
		SWPLogManager::log("Generate content url",array("data"=>$data),TLogger::INFO,$this,"generateContentUrl","SWP");
		// 		return TVarDumper::dump($data);
		extract($data);//return TVarDumper::dump($data);
		//if (!($course = CourseRecord::finder()->find('content_id = ?',array($content_id))))
		//	throw new FJsonException('Course does not exists '.$content_id);
		
		$instructorId = $instructor_id;
		$studentId =  $student_id;
		$user = UserRecord::finder()->findByUsername($user_id);
		$distributorLaunch = false;
		// Vefiy wether the user exists in the system 
		if( empty($user)){
			SWPLogManager::log("Returns if users doesnot exist",array("success"=>false,"message"=>"User doesnot exists in the system with the user_id ".$user_id),TLogger::INFO,$this,"generateContentUrl","SWP");
			return array("success"=>false,"message"=>"User doesnot exists in the system with the user_id ".$user_id);
		}else{
			
			$userRoles =   $user->getExtractedRoles() ;
			
			if( in_array('2', $userRoles['all']) || in_array('35', $userRoles['all'])  ){
				$distributorLaunch=true;
				$student_id = $user_id;
				if(in_array('2', $userRoles['all'])){
					$role =2;
				} else if(in_array('35', $userRoles['all'])){
					$role =35;
				}
			}else if(   in_array('3',$userRoles['all'])   ){
				$role =3;
			}else if(   in_array('24',$userRoles['all'])   ){
				$role =24;
			}else{
				SWPLogManager::log("Returns if users doesnot have any",array("success"=>false,"message"=> "Users doesnot have any of the roles- Instructor,editors & student"),TLogger::INFO,$this,"generateContentUrl","SWP");
				return array("success"=>false,"message"=> "Users doesnot have any of the roles- Instructor,editors & student");
			}
		}
		
		$instructorUser = UserRecord::finder()->findByUsername($instructorId);
		$studentUser = UserRecord::finder()->findByUsername($student_id);
		
		if( !empty( $instructor_id ) ){
			
			if( $instructorUser ){
				$instructor_id = $instructorUser->Uid;
				$insroles  =$instructorUser->getExtractedRoles();
				$insroles =$insroles['all'];
				if( !in_array('24', $insroles) ){
					SWPLogManager::log("Returns if users doesnot have instructor role",array("success"=>false,"message"=> "user_id passed for instructor ".$instructor_id . "doesnot have instructor role."),TLogger::INFO,$this,"generateContentUrl","SWP");
					return array("success"=>false,"message"=> "user_id passed for instructor ".$instructor_id . "doesnot have instructor role.") ;
				}
			}else if( $role ==2 ){
				$instructor_id = null;
			}else{
				SWPLogManager::log("Returns if instructor does not exists in the system with the user id",array("success"=>false,"message"=> "instructor doesnot exists in the system with the user_id " . $instructor_id ),TLogger::INFO,$this,"generateContentUrl","SWP");
				return array("success"=>false,"message"=> "instructor doesnot exists in the system with the user_id " . $instructor_id );
			}
			
		}
		
		if( !$distributorLaunch && !empty( $studentUser ) ){
			$student_id = $studentUser->Uid;
			$stroles  =$studentUser->getExtractedRoles();
			$stroles =$stroles['all'];
			if( !in_array('3', $stroles) ){
				SWPLogManager::log("Returns if passed user id does not have student role",array("success"=>false,"message"=> "user_id passed for student ".$student_id . "doesnot have student role." ),TLogger::INFO,$this,"generateContentUrl","SWP");
				return array("success"=>false,"message"=> "user_id passed for student ".$student_id . "doesnot have student role." );
			}
				
		}else if(!$distributorLaunch){
			SWPLogManager::log("Returns if student does not exist in the system with this user id",array("success"=>false,"message"=> "student doesnot exists in the system with the use_id " . $student_id ),TLogger::INFO,$this,"generateContentUrl","SWP");
			return array("success"=>false,"message"=> "student doesnot exists in the system with the use_id " . $student_id );
		}

		
		if( !$distributorLaunch && empty( $product_id ) ){
			SWPLogManager::log("Returns if not able to generateContentUrl for student/instuctor without product id",array("success"=>false,"message"=>"Cannot generateContentUrl for student/instuctor without product_id"),TLogger::INFO,$this,"generateContentUrl","SWP");
			return array("success"=>false,"message"=>"Cannot generateContentUrl for student/instuctor without product_id");
		}


		if( !$distributorLaunch && !$studentUser ){
			SWPLogManager::log("Returns if student does not exist with current user id",array("success"=>false,"message"=>"Student doesnot exists in the system with the user_id ".$studentId),TLogger::INFO,$this,"generateContentUrl","SWP");
			return array("success"=>false,"message"=>"Student doesnot exists in the system with the user_id ".$studentId);
		}
		if( !$distributorLaunch &&  !$instructorUser ){
			$instructorId = null;
			$courseInstanceRecords = CourseDetailsRecord::finder()->find(' product_id =? AND course_id =? AND  student_id=? AND instructor_id IS NULL ',
			array($product_id,$content_id,$studentUser->Uid));
		}else if(!$distributorLaunch ){
			$instructorId = $instructorUser->Uid;
			$courseInstanceRecords = CourseDetailsRecord::finder()->find(' product_id =? AND course_id =? AND  student_id=? AND instructor_id =? ',
				array($product_id,$content_id,$studentUser->Uid,$instructorId));
		}
		
		//return array("data"=>$studentUser->Uid."--".$instructorUser->Uid."--".$product_id."--".$content_id ,"count"=>$courseInstanceRecords);
		if(  !$distributorLaunch && count($courseInstanceRecords) <= 0 ){
			SWPLogManager::log("Returns course instance not created",array("success"=>false,"message"=>"Couse Instance is not created for  ","data"=>array($data) ),TLogger::INFO,$this,"generateContentUrl","SWP");
				return array("success"=>false,"message"=>"Couse Instance is not created for  ","data"=>array($data) );
		}
		if ( !$distributorLaunch &&  is_int($product_id)){
			$aurl = $this->find('activated <= UNIX_TIMESTAMP() AND expire >= UNIX_TIMESTAMP() AND user_id = ? AND product_id = ? AND content_id = ? ',
					array($user_id,$product_id,$content_id));
		}else{
			$aurl = $this->find('activated <= UNIX_TIMESTAMP() AND expire >= UNIX_TIMESTAMP() AND user_id = ? AND product_id = ? AND content_id = ? ',
					array($user_id, $studentUser->Uid.$content_id, $content_id));
		}

		// if( !$distributorLaunch ){
		// 	 $records = CourseDetailsRecord::finder()->find(' product_id =? AND course_id =? AND (instructor_id = ? or student_id = ?)
		// 	  ',array($product_id,$content_id,$user->Uid, $user->Uid));
		// 	 if(!count($records)){
		// 	 	return array("success"=>false,"message"=> "Users doesnot have access for this course");
		// 	 }
		// }
		if (!$aurl)
		{
			$newRecord = true;
			$aurl = new ActiveUrlRecord;
			$aurl->user_id = $user_id;
			$aurl->content_id = $content_id;
			$aurl->product_id =  $role == 2 ? ($studentUser->Uid.$content_id) : $product_id;//( $product_id ) ? $product_id :0;
			$aurl->alreadyplayed = 0;
		}
		$url = sha1($aurl->product_id.':'.$aurl->content_id.':'.$user->username.':'.microtime());
		
		$aurl->activated = ($activated) ? $activated : time();
		$aurl->expire = ($expire) ? $expire : strtotime('+ 1 day');
		$aurl->url = $url;
		
		$aurl->instructor_id = $instructor_id;
		$aurl->student_id=$student_id;
		SWPLogManager::log("New record object",$aurl,TLogger::DEBUG,$this,"generateContentUrl","SWP");
		
		//201311111248
		if( count( $courseInstanceRecords) > 0) {
			$courseInstanceRecords->activated=1;
			$courseInstanceRecords->save();
		}
		$aurl->save();
		SWPLogManager::log("New record object",array("success"=>true,"url"=>$aurl->getPlayerUrl()),TLogger::INFO,$this,"generateContentUrl","SWP");
			 return array("success"=>true,"url"=>$aurl->getPlayerUrl());
		
		/* if (!$newRecord){
			$aurl->save();
			 return array("success"=>true,"url"=>$aurl->getPlayerUrl());
		}
		
		// Check whether Product_id exist for other course, if exist then we will display an alert message.
		$rec = ActiveUrlRecord::finder()->find('user_id = ? and product_id = ? AND expire >= UNIX_TIMESTAMP() ', array($user_id, $aurl->product_id ) );
		if(!count($rec)){
			if ( $user->Uid == $instructor_id){
				
				$rec = ActiveUrlRecord::finder()->find(' product_id = ? and student_id = ? AND expire >= UNIX_TIMESTAMP()', array($aurl->product_id, $student_id ) );
			} else {
			
				$rec = ActiveUrlRecord::finder()->find(' product_id = ? and instructor_id = ? AND expire >= UNIX_TIMESTAMP() ', array($aurl->product_id, $instructor_id ) );
			}
			if ( !count($rec) || $rec->content_id == $content_id) {
			
				$aurl->save();
				
				//This will create Contenet Details Entry
				$userDetailsArray = array('content_id'=>$aurl->content_id , 'product_id'=>$aurl->product_id ,
										  'instructor_availability_date'=>date("Y-m-d H:i:s", strtotime('+ 15 days') ),
										  'instructor_id'=>$instructorId,
										  'student_id'=>$studentId  );
				$contentDetails = $this->createContentDetails ($userDetailsArray);
				if( $contentDetails[success] ){
				
					 return array("success"=>true,"url"=>$aurl->getPlayerUrl());
				} else {
					return array("success"=>false ,"message"=>' '.$contentDetails[Messsage]);
				}
			 
			}else {
			return array("success"=>false ,"message"=>"The product id entered is already exist. Please enter a new product id");
		}
		} else {
			return array("success"=>false ,"message"=>"The product id entered is already exist. Please enter a new product id");
		} */

	}
	
	public function getAdminUrl() {
		SWPLogManager::log("Get Admin Url",null,TLogger::INFO,$this,"getAdminUrl","SWP");
		$uri = Prado::getApplication()->getRequest()->getUrl();
		$host = str_replace('api.','',$uri->getHost());
		$scheme = $uri->getScheme();
		SWPLogManager::log("Returns admin url",$scheme.'://'.$host.'/open/'.$this->url,TLogger::INFO,$this,"getAdminUrl","SWP");
		return $scheme.'://'.$host.'/open/'.$this->url;
		
	}
	
	public function getPlayerUrl() {
		SWPLogManager::log("Getting player url",null,TLogger::INFO,$this,"getPlayerUrl","SWP");
        $uri = Prado::getApplication()->getRequest()->getUrl();
        //$host = str_replace(array('api.','-admin'),'',$uri->getHost());
        $host = str_replace(array('api.','-admin','admin.local'),array('','','swp.local'),$uri->getHost());

        $scheme = $uri->getScheme();
        SWPLogManager::log("Return player url",$scheme.'://'.$host.'/play/'.$this->url,TLogger::INFO,$this,"getPlayerUrl","SWP");
        return $scheme.'://'.$host.'/play/'.$this->url; 
//       return $scheme.'://'.$host.'/video.html?token='.$this->url;
       
    }

	public static function finder($className=__CLASS__)
	{
		return parent::finder($className);
	}
	
	/**
	 * This method is used to create the course details entry in to course_details table ,
	 * The required data will be served with the array $data.
	 * array of data which will contain values for keys
	 *	1. content_id (course_id)
	 *	2. product_id
	 *	3. instructor_id
	 *	4. student_id
	 *	5. instructor_availability_date (YYYY-MM-DD H:i:s)
	 * @param Array of required data $data
	 */
	public function  createContentDetails ($data){
		SWPLogManager::log("Creating content details",array("data"=>$data),TLogger::INFO,$this,"createContentDetails","SWP");
		$student = UserRecord::finder()->findByUsername( $data['student_id'] );
		$instructor = UserRecord::finder()->findByUsername( $data['instructor_id'] );
		$record = CourseDetailsRecord::finder()->find('product_id = ? AND course_id = ? AND student_id = ?',
			array( $data['product_id'],$data['content_id'],$student->Uid) );
		 	//Checking for the existence of the records in the table if not exist then only inserting the record.
		  if(empty($data['product_id'])){
		  	SWPLogManager::log("Returns product does not exist",array("success"=>false ,"message"=>"The product id deosnot exists inthe parameters"),TLogger::INFO,$this,"createContentDetails","SWP");
                                return array("success"=>false ,"message"=>"The product id deosnot exists inthe parameters");
                        }


			 SWPLogManager::log("input data",$record,TLogger::DEBUG,$this,"createContentDetails","FreshSystem");                        


		 	if( empty($record) ||  count($record) == 0 ){
                                $products = CourseDetailsRecord::finder()->find('product_id = ? ',array( $data['product_id']) );
                                if( !empty($products) && count( $products ) > 0 ){
                                	SWPLogManager::log("Returns course instance exist with this product id",array('success'=>false ,'message'=> 'course Instance  exists in the system with given product_id ' ,'product_exists'=>false),TLogger::INFO,$this,"createContentDetails","SWP");
                                        return array('success'=>false ,'message'=> 'course Instance  exists in the system with given product_id ' ,'product_exists'=>false);
                                }

                                SWPLogManager::log("products data",$products,TLogger::DEBUG,$this,"createContentDetails","SWP");
                                $courseDetail = new CourseDetailsRecord;
                                SWPLogManager::log("New course object",$courseDetail,TLogger::INFO,$this,"createContentDetails","SWP");
                                $courseDetail->product_id = $data['product_id'];
                                $courseDetail->course_id = $data['content_id'];

                                // Get the Instructor uid
                                
                                $courseDetail->instructor_id = $instructor ? $instructor->Uid : null;

                                //Get the student Uid
                                 if( !empty($student)){
                                	$courseDetail->student_id = $student->Uid;
                            	}else{
                            		SWPLogManager::log("Returns course instance can not create withour student",array('success'=>false ,'message'=> 'course Instance  cannot craete course instance without student ' ),TLogger::INFO,$this,"createContentDetails","SWP");
                            		return array('success'=>false ,'message'=> 'course Instance  cannot craete course instance without student ' );
                            	}
                            	
                            	$courseDetail->coursesize = $this->getCourseSize($data['content_id']);
                            	SWPLogManager::log("total size of the file is ",array("course size"=>$courseDetail->coursesize),$this,"createContentDetails","SWP");
								$courseDetail->courseduration = $data['courseduration'];
								$courseDetail->expirationdate = $data['expirationdate'];
								$courseDetail->coursestartdate = date('Y/m/d H:i:s');
								
                                // If instructor availabilityDate is in this particular format then only
                                // save into db otherwise show a message to the user.
                                if( !empty( $data['instructor_availability_date'] )){
	                                if( preg_match('/\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}/', $data['instructor_availability_date'] ) ){

	                                        $courseDetail->availablilitydate = $data['instructor_availability_date'];
	                                      
	                                } else {
	                                	SWPLogManager::log("Returns instructor availability date format should be YYYY-MM-DD H:i:s",array("success"=>false,"messsage"=> "instructor_availability_date should be in  YYYY-MM-DD H:i:s format but the value passed is --".$data['instructor_availability_date'],"product_exists"=>false),TLogger::INFO,$this,"createContentDetails","SWP");
	                                        return array("success"=>false,"messsage"=> "instructor_availability_date should be in  YYYY-MM-DD H:i:s format but the value passed is --".$data['instructor_availability_date'],"product_exists"=>false);
	                                }
                                }
                                  $courseDetail->save();
                                //Here we are creating the courselevel settings in to the settings table.
                            		$this->createCourseLevelSettings( $data['content_id'],$courseDetail->instructor_id,true, $courseDetail->instructor_id );
	                                $this->createCourseLevelSettings( $data['content_id'],$student->Uid,false,$courseDetail->instructor_id);
								SWPLogManager::log("Returns Course instance created",array('success'=>true ,'message'=> 'course Instance  craeted successfully ' ),TLogger::INFO,$this,"createContentDetails","SWP");
                                return array('success'=>true ,'message'=> 'course Instance  craeted successfully ' );
                        }  else{
                        		SWPLogManager::log("Returns course instance already exist for given product id",array('success'=>false ,'message'=> 'course Instance  exists in the system with given product_id ','product_exists'=>true ),TLogger::INFO,$this,"createContentDetails","SWP");
                                return array('success'=>false ,'message'=> 'course Instance  exists in the system with given product_id ','product_exists'=>true );
                        }
        }

	    
	/**
	* Calulates the size of the video files attached to the lesson's of this course
	**/
	public function getCourseSize($content_id){
		SWPLogManager::log("Getting course size",array("data"=>$content_id),TLogger::INFO,$this,"getCourseSize","SWP");
		//TODO loop the video's and calculate the size of the video's
		 $course = CourseRecord::finder()->withCc('(1=1) ORDER BY ordering')->find('content_id = ?',array($content_id));
		  $cc = $course->cc;
		  $totalfilesize =0;
		  foreach($cc as $c) {
		  	    $v  = $c->content;
		  	    $totalfilesize = $totalfilesize +  $v->getFilesize();
		  }
		  $totalfilesizeInMB = $totalfilesize/1024;
		  $totalfilesize = round($totalfilesizeInMB, 2 ); 
		  SWPLogManager::log("total size of the course is ",array("size"=>$totalfilesize),$this,"getCourseSize","SWP");
		  return $totalfilesize;
	}
			 
	
	/**
	 * This method is used to udpate the course details entry in to course_details table ,
	 * The required data will be served with the array $data.
	 * array of data which will contain values for keys
	 *	1. content_id (course_id)
	 *	2. product_id
	 *	3. instructor_id
	 *	4. student_id
	 *	5. instructor_availability_date (YYYY/MM/DD H:i:s)
	 * @param Array of required data $data
	 */
	public function  updateContentDetails ($data){
		SWPLogManager::log("Update content details",array("data"=>$data),TLogger::INFO,$this,"updateContentDetails","SWP");
		if(isset($data['student_id'])) { 
		 				$student = UserRecord::finder()->findByUsername( $data['student_id'] );
			 			
		 }
		$record = CourseDetailsRecord::finder()->find('product_id = ? AND course_id = ? ',array( $data['product_id'],$data['content_id']) );
		
		if( count( $record ) > 0 ){
		
		 		// if the value instructor_availability_date field in the passed data is empty do not change the value in the record.
		 		// if( ! empty( $data['instructor_availability_date'] ) && preg_match('/\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}/', $data['instructor_availability_date'] )  ) {
		 			if( !empty( $data['instructor_availability_date'] )){
	                                if( preg_match('/\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}/', $data['instructor_availability_date'] ) ){

	                                        $courseDetail->availablilitydate = $data['instructor_availability_date'];
	                                      
	                                } else {
	                                	SWPLogManager::log("Returns instructor availability date format should be YYYY-MM-DD H:i:s",array("success"=>false,"messsage"=> "instructor_availability_date should be in  YYYY-MM-DD H:i:s format but the value passed is --".$data['instructor_availability_date'],"product_exists"=>false),TLogger::INFO,$this,"updateContentDetails","SWP");
	                                    return array("success"=>false,"messsage"=> "instructor_availability_date should be in  YYYY-MM-DD H:i:s format but the value passed is --".$data['instructor_availability_date'],"product_exists"=>false);
	                                }
                    }
		 			if(isset($data['instructor_id'])) { 
						$instructor = UserRecord::finder()->findByUsername( $data['instructor_id'] );
					}
					
		 			if(isset($data['product_id']) && $record->product_id != $data['product_id']) {
		 				SWPLogManager::log("Returns product can not be changed",array('success'=>false ,'message'=> 'productid cannot be changed'),TLogger::INFO,$this,"updateContentDetails","SWP");
			 			return array('success'=>false ,'message'=> 'productid cannot be changed');
		 			}
		 			
		 			if(isset($data['content_id']) && $record->course_id != $data['content_id']) {
		 				SWPLogManager::log("Returns content id can not be changed",array('success'=>false ,'message'=> 'content_id cannot be changed'),TLogger::INFO,$this,"updateContentDetails","SWP");
			 			return array('success'=>false ,'message'=> 'content_id cannot be changed');
		 			}
		 			if(empty($data['instructor_id'])){
		 			
						$this->updateInstructorChangeSettings($record->course_id,$record->instructor_id,null );
		 				
		 			}
		 			if( $instructor) { 
		 				
		 				$userRoles =   $instructor->getExtractedRoles() ;

						if( !in_array('24', $userRoles['all'])  ){
							SWPLogManager::log("Returns user is not a instructor",array('success'=>false ,'message'=> 'user --> '. $data['instructor_id']  ."is not an instructor"),TLogger::INFO,$this,"updateContentDetails","SWP");
							return array('success'=>false ,'message'=> 'user --> '. $data['instructor_id']  ."is not an instructor");
						}
						
						if( $record->instructor_id != $instructor->Uid){
							
							if( !$record->instructor_id ){
								$oldInstructorId = $record->old_instructor_id ;
							}else{
								
								$oldInstructorId = $record->instructor_id ;
							}
							$record->instructor_id = $instructor->Uid;
							//201311290943
							$this->updateInstructorChangeToMessages($record->product_id,$record->course_id,$oldInstructorId,$instructor->Uid);
							$this->updateInstructorChangeSettings($record->course_id,$oldInstructorId,$instructor->Uid);
							
								//TODO Something on Instructor Change
						}
					}else{
						//201311290943
						if( $record->instructor_id  ){
							$record->old_instructor_id = $record->instructor_id;
						}
						
						$record->instructor_id = null;
						
					}
		 			if( $student) { 
		 				
			 			
			 			$userRoles =   $student->getExtractedRoles() ;	
						if( !in_array('3', $userRoles['all'])  ){
							SWPLogManager::log("Returns user is not a student",array('success'=>false ,'message'=> 'user --> '. $data['student_id']  ."is not an Student","roles"=>$userRoles['all']),TLogger::INFO,$this,"updateContentDetails","SWP");
							return array('success'=>false ,'message'=> 'user --> '. $data['student_id']  ."is not an Student","roles"=>$userRoles['all']);
						}
						if( $record->student_id != $student->Uid){
							SWPLogManager::log("Returns student id can not be changed",array('success'=>false ,'message'=> 'student_id cannot be changed'),TLogger::INFO,$this,"updateContentDetails","SWP");
							if( $record->activated == 1 ){
								return array('success'=>false ,'message'=> 'student_id cannot be changed after activting the course');
							}
							$this->updateInstructorChangeSettings($record->course_id,$record->student_id,$student->Uid );
							 $record->student_id = $student->Uid;

								//TODO Something on Instructor Change
						}
						
		 			}else{
		 				SWPLogManager::log("Returns user does not exist in system",array('success'=>false ,'message'=> 'user -->'. $data['student_id']  ."doesnot exists in the system"),TLogger::INFO,$this,"updateContentDetails","SWP");
		 				return array('success'=>false ,'message'=> 'user -->'. $data['student_id']  ."doesnot exists in the system");
		 			}
		 			if( $record->availablilitydate != $data['instructor_availability_date'] ){
		 				$record->availablilitydate = $data['instructor_availability_date'];
		 				//TODO Something when instructor availability date is changed
		 			}
		 			if(!empty($data['courseduration'])){
		 			
				 		$record->courseduration = $data['courseduration'];
		 			}
		 			if(!empty($data['expirationdate'] )){
		 			
						$record->expirationdate = $data['expirationdate'];
		 			}
					
			 		$record->save();
			 		SWPLogManager::log("Returns course instance updated",array('success'=>true ,'message'=> 'course Instance updated Succesfully ' ),TLogger::INFO,$this,"updateContentDetails","SWP");
			 		return array('success'=>true ,'message'=> 'course Instance updated Succesfully ' ,'data'=>$data);
		 		// }else{
		 			// return array("success"=>false,"messsage"=> "instructor_availability_date should be in  YYYY-MM-DD H:i:s format but the value passed is --". $data['instructor_availability_date']);
		 		// }
		 		
		}else{
			SWPLogManager::log("Returns course instance does not exist in system",array('success'=>false ,'message'=> 'course Instance doesnot exists in the system with given details s',"data"=>$data,"product_not_exists"=>true),TLogger::INFO,$this,"updateContentDetails","SWP");
			return array('success'=>false ,'message'=> 'course Instance doesnot exists in the system with given details s',"data"=>$data,"product_not_exists"=>true);
		}
		 		
		 	
	}
	public function updateInstructorChangeSettings(  $content_id,$oldInstructorId,$newInstructorId ){
		SWPLogManager::log("Update instructon change setting",array("Content id"=>$content_id, "Old instruction id"=>$oldInstructorId, "New instruction id"=>$newInstructorId),TLogger::INFO,$this,"updateInstructorChangeSettings","SWP");
		 $ini_array = parse_ini_file($_SERVER['DOCUMENT_ROOT'].'/images/settings/settings.ini', true);
		 $values = array();
		 foreach($ini_array as $k=>$v){
		 	$values[$k] = $v;
		 }
		 
		 foreach ($values as $value){
		 	
		 		if( $value['onlyInstructor'] || $value['coursesettings']  ){
		 			if( empty($oldInstructorId)){
						$records = UserSettingsRecord::finder()->find('`key` = ? AND user_id is NULL AND content_id = ? ',array( $value['name'],$content_id) );
		 			} else {
		 			
			 			$records = UserSettingsRecord::finder()->find('`key` = ? AND user_id = ? AND content_id = ? ',array( $value['name'],$oldInstructorId,$content_id) );
 						UserSettingsRecord::finder()->deleteAll('`key` = ? AND user_id = ? AND content_id = ? AND uid != ?',array( $value['name'],$newInstructorId,$content_id,$records->uid) );
		 			}
			 		if( count($records)){
			 			if(!empty($newInstructorId)){
			 			
				  			$records->value    =   'YES';
			 			}
			  			$records->user_id    =   $newInstructorId;
			  			$records->save();
			 		} 
		 		}
		 }
		 	
		
	}
	public function updateInstructorChangeToMessages( $product_id,$content_id,$oldInstructorId,$newInstructorId){
		
		SWPLogManager::log("Update instructon change message",array("Product id"=>$product_id,"Content id"=>$product_id, "Old instruction id"=>$oldInstructorId, "New instruction id"=>$newInstructorId),TLogger::INFO,$this,"updateInstructorChangeToMessages","SWP");
		
		$threadRecords = ThreadRecord::finder()->findAll("product_id =? ",array($product_id));
		if( count( $threadRecords ) > 0 ){
			//var_dump(count( $threadRecords));
			foreach ($threadRecords as $threadRecord){
				if( $threadRecord->created_user_id == $oldInstructorId ){
					$threadRecord->created_user_id = $newInstructorId;
				}
				
				if( $threadRecord->last_update_user_id == $oldInstructorId ){
					$threadRecord->last_update_user_id = $newInstructorId;
				}
				
				$threadRecord->save();
				//var_dump( $threadRecord->threadUsers);
				$threadUsers = ThreadUserRecord::finder()->findAll('thread_id=?',$threadRecord->uid);
				if( count($threadUsers) > 0 ){
					foreach ($threadUsers as $threadUser){
						if( $threadUser->user_id == $oldInstructorId ){
							$threadUser->user_id = $newInstructorId;
							$threadUser->save();
						}
					}
				}
			}
		}
		
		$threadPostRecords = ThreadPostRecord::finder()->findAll("author_id =? ",array($oldInstructorId));
		if( count( $threadPostRecords ) > 0 ){
			
			foreach ($threadPostRecords as $threadPostRecord){
				$threadPostRecord->author_id = $newInstructorId;
				$threadPostRecord->save();
				
				$threadPostUserRecords =ThreadPostUserRecord::finder()->findAll('post_id=? and user_id =? ',array($threadPostRecord->uid,$oldInstructorId));
				if( count($threadPostUserRecords) > 0 ){
					foreach ($threadPostUserRecords as $threadPostUser){
						
						$threadPostUser->user_id = $newInstructorId;
						$threadPostUser->save();
					}
				}
			}
		}
		
	}
	
	public function createCourseLevelSettings( $content_id, $uid, $instructorrole, $instructor_id ){
		
		SWPLogManager::log("Create course level setting",array("Content id"=>$product_id, "User id"=>$uid, "Instructor role"=>$instructorrole, "Instructor id"=>$instructor_id),TLogger::INFO,$this,"createCourseLevelSettings","SWP");
		
		 $ini_array = parse_ini_file($_SERVER['DOCUMENT_ROOT'].'/images/settings/settings.ini', true);
		 $values = array();
		 foreach($ini_array as $k=>$v){
		 	$values[$k] = $v;
		 }
		 
		 foreach ($values as $value){
		 
		 	if( $value['coursesettings'] ) {
		 		$recordExist = false;
		 		if( !$value['onlyInstructor'] && !$value['onlyStudent']){
		 			$records = UserSettingsRecord::finder()->find('`key` = ? AND user_id = ? AND content_id = ? ',array( $value['name'],$uid,$content_id) );
		 			$recordExist = true;
//		 			if(!$instructorrole  ){
		 				if( empty($instructor_id) ){
		 				
			 				$value['default'] = 'NO';
		 				}
			 			if( count($records) > 0 ){
			 			
			 				$records->value = 'YES';
			 				$records->save();
			 			}
//		 			} 
		 		}
		 		else if( $value['onlyInstructor'] && $instructorrole ){
		 		
			 		$records = UserSettingsRecord::finder()->find('`key` = ? AND user_id = ? AND content_id = ? ',array( $value['name'],$uid,$content_id) );
		 			if( empty($instructor_id) ){
		 				
			 				$value['default'] = 'NO';
		 			}
		 			if( count($records) > 0 ){
			 			
			 				$records->value = 'YES';
			 				$records->save();
			 			}
			 		$recordExist = true;
		 		} else if( $value['onlyStudent'] && !$instructorrole ){
		 			$records = UserSettingsRecord::finder()->find('`key` = ? AND user_id = ? AND content_id = ? ',array( $value['name'],$uid,$content_id) );
		 			if( empty($instructor_id) ){
		 				
			 				$value['default'] = 'NO';
		 			}
		 			if( count($records) > 0 ){
			 			
			 				$records->value = 'YES';
			 				$records->save();
			 		}
		 			$recordExist = true;
		 		}
		 		if( $recordExist && !count($records)){
		 		
		 			$ur = new UserSettingsRecord;
		 			SWPLogManager::log("Object for user settings",$ur,TLogger::DEBUG,$this,"createCourseLevelSettings","SWP");
		  			$ur->user_id    =   $uid;
		  			$ur->name 		=	$value['group'];
		  			$ur->key		=	$value['name'];
		  			$ur->value		=	$value['default'];
		  			$ur->enable		=	$value['enable'];
		  			$ur->group		=	$value['group'];
		  			$ur->content_id =   $content_id;	
		  			$ur->save();
		 		}
		 	}
		 }
		
	}
	
	/**
	 * This method is useful to check the mandatory input parameters and course instance details 
	 * then this method will call getMessageWindowURL method that will return the message window URL
	 * @param array $data
	 * user_id                   Username 
	 * course_instance_id        Course Instance product id
	 * 201404150531
	 */
	public function activateMessagingWindow($data) {
		SWPLogManager::log("Generate content url",array("data"=>$data),TLogger::INFO,$this,"activateMessagingWindow","SWP");
		extract($data);
		if( isset($user_id) && !empty($user_id) ){
			if(isset($course_instance_id) && !empty($course_instance_id)){
				
				$user = UserRecord::finder()->findByUsername($user_id);
				//Product id of the course instance
				$courseInstanceId = $course_instance_id;
				
				// Vefiy wether the user exists in the system 
				if( empty($user)){
					SWPLogManager::log("Returns if users doesnot exist",array("success"=>false,"message"=>"User doesnot exists in the system with the user_id ".$user_id),TLogger::INFO,$this,"activateMessagingWindow","SWP");
					return array("success"=>false,"message"=>"User doesnot exists in the system with the user_id ".$user_id);
				} else {
					$record = CourseDetailsRecord::finder()->find('product_id = ? ',array( $courseInstanceId ) );
					if( count( $record ) > 0 ){
						$result = $this->getMessageWindowURL($user_id , $record);
						return $result;
					}else{
						SWPLogManager::log("Returns course instance does not exist in system",array('success'=>false ,'message'=> 'course Instance doesnot exists in the system with given details s',"data"=>$data,"product_not_exists"=>true),TLogger::INFO,$this,"activateMessagingWindow","SWP");
						return array('success'=>false ,'message'=> 'course Instance doesnot exists in the system with given details',"data"=>$data,"product_not_exists"=>true);
					}
				}
			} else {
				return array("success"=>false,"message"=>"Course Instance ID is mandatory");
			}  
		}else{
			 SWPLogManager::log("Returns if user id does not exist",array('success'=>false ,'Message'=> 'user_id is mandatory'),TLogger::INFO,$this,"activateMessagingWindow","SWP");
			 return array('success'=>false ,'Message'=> 'user_id is mandatory');
		}
	}
	
	/**
	 * This method is useful for Checking the course instance and then after validateing the ActiveURL Record
	 * @param unknown_type $user_id
	 * @param unknown_type $courseDetailsRecord
	 * 201404150531
	 */
	public function getMessageWindowURL($user_id , $courseDetailsRecord){
		
		if($courseDetailsRecord){
			 
			$message = $this->checkCourseInstanceValidation($user_id , $courseDetailsRecord);
			if($message['success']) {
				$result = $this->checkActiveURLValidation($user_id , $courseDetailsRecord);
				return $result;
			} else{
				return $message;
			}
		}
	}
	
	/**
	 * This method is useful for finding Actvice URL record related to this course instance ,
	 * If it is not able to find one then it will create a new Active URL record if the course instance 
	 * is not expired.
	 * @param unknown_type $user_id
	 * @param CourseDetails Record $courseDetailsRecord
	 * 201404150531
	 */
	public function checkActiveURLValidation($user_id , $courseDetailsRecord){
		$user = UserRecord::finder()->findByUsername($user_id);
		$userRoles =   $user->getExtractedRoles() ;
		$distributorLaunch=false;
		$product_id = $courseDetailsRecord->product_id;
		$content_id = $courseDetailsRecord->course_id;	
		if( in_array('2', $userRoles['all'])  ){
			$distributorLaunch=true;
			$role =2;
		}else if(   in_array('3',$userRoles['all'])   ){
			$role =3;
		}else if(   in_array('24',$userRoles['all'])   ){
			$role =24;
		}else{
			SWPLogManager::log("Returns if users doesnot have any",array("success"=>false,"message"=> "Users doesnot have any of the roles- Instructor,editors & student"),TLogger::INFO,$this,"checkActiveURLValidation","SWP");
			return array("success"=>false,"message"=> "Users doesnot have any of the roles- Instructor,editors & student");
		}
		
		if ( !$distributorLaunch &&  is_int($product_id)){
			$aurl = $this->find('activated <= UNIX_TIMESTAMP() AND expire >= UNIX_TIMESTAMP() AND user_id = ? AND product_id = ? AND content_id = ? ',
					array($user_id,$product_id,$content_id));
		}else{
			$aurl = $this->find('activated <= UNIX_TIMESTAMP() AND expire >= UNIX_TIMESTAMP() AND user_id = ? AND product_id = ? AND content_id = ? ',
					array($user_id, $user->Uid.$content_id, $content_id));
		}
		
		if (!$aurl) {
			
			$aurl = new ActiveUrlRecord;
			$aurl->user_id = $user_id;
			$aurl->content_id = $content_id;
			$aurl->product_id =  $distributorLaunch ? ($user->Uid.$content_id) : $product_id;
			$aurl->alreadyplayed = 0;
			
			$url = sha1($aurl->product_id.':'.$aurl->content_id.':'.$user->username.':'.microtime());
			
			$aurl->activated = ($activated) ? $activated : time();
			$aurl->expire = ($expire) ? $expire : strtotime('+ 1 day');
			$aurl->url = $url;
			
			$aurl->instructor_id = $courseDetailsRecord->instructor_id;
			$aurl->student_id    = $courseDetailsRecord->student_id;
			$aurl->save();
		}
		
		$token = $aurl->url;
        if($token) {
	         return array("success"=>true,"url"=>$aurl->getMessageUrl());
        } else  {
             return array("success"=>false,"message"=>"Course Instance Token not exists");
        }
	}
	
	
	/**
	 * This method is useful to check course_details table entry(Course instance) is expired or not
	 * @param unknown_type $user_id
	 * @param CourseDetails Record $courseDetailsRecord
	 * 201404150531
	 */
	public function checkCourseInstanceValidation($user_id , $courseDetailsRecord){
		$expirationdate = $courseDetailsRecord->expirationdate;
		//Some couses will not expire so we will check this condition if the expirationdate exists
		if($expirationdate){
			$currentDate = date("Y-m-d H:i:s",time());
			if($expirationdate < $currentDate){
				$message = "Course Instance is expired , please update Course instance for the details :";
				$message = $message."  instructor_availability_date : ".$courseDetailsRecord->availablilitydate;
				$message = $message."  ,product_id :".$courseDetailsRecord->product_id;
				$message = $message."  ,instructor_id:".$courseDetailsRecord->instructor_id;
				$message = $message."  ,student_id:".$courseDetailsRecord->student_id;
				$message = $message."  ,content_id:".$courseDetailsRecord->course_id;
				$message = $message."  ,courseduration:".$courseDetailsRecord->courseduration;
				$message = $message."  ,expirationdate:".$courseDetailsRecord->expirationdate;
				return array("success"=>false,"message"=>$message);
			}
		}
		
		//This course is not an instructor led course
		if(!isset($courseDetailsRecord->instructor_id)){
			return array("success"=>false,"message"=>"This course is not an instructor led course");
		}
		
		return array("success"=>true,"message"=>"Course Instance is not expired");
	}
	
		
	/**
	 * Method to prepare the Messate window URL to access directly from the emails
	 * 201404150531
	 */
	public function getMessageUrl() {
	    SWPLogManager::log("Getting player url",null,TLogger::INFO,$this,"getPlayerUrl","SWP");
             
        $uri = Prado::getApplication()->getRequest()->getUrl();
        $host = str_replace(array('api.','-admin','admin.local'),array('','','swp.local'),$uri->getHost());
        $scheme = $uri->getScheme();
             
		SWPLogManager::log("Return player url",$scheme.'://'.$host.'/play/'.$this->url,TLogger::INFO,$this,"getPlayerUrl","SWP");
             
        return $scheme.'://'.$host.'/?page=admin.Message&token='.$this->url; 
	}
}