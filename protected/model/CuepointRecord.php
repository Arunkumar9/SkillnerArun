<?php
/**
 * Auto generated by prado-cli.php on 2008-10-20 11:24:56.
 */
class CuepointRecord extends CuepointAR
{
	public static function finder($className=__CLASS__)
	{
		return parent::finder($className);
	}

        public function getStyle() { return ''; }

        public function getStartFormated() {  return self::formatTime($this->start);        }
        public function getStopFormated() {  return self::formatTime($this->stop);        }

        public function setStartFormated($v) {  $this->start = self::deformatTime($v);        }
        public function setStopFormated($v) {  $this->stop = self::deformatTime($v);        }

        public static function getNoContextSql() {
	        return "ishidden = 1";
    	}
    
/*
        public static function deformatTime($tt) {

            $secs = explode(':',$tt);
            $i=0;$s=0;
            if (count($secs)>2) array_pop($secs);
            while (count($secs)>0) {
                $s += array_pop($secs)*pow(60,$i);
                $i++;
            }
            return $s;

        }

        public static function formatTime($ts) {

                $hr = (int) floor($ts/3600);
                $min = (int) floor(($ts % 3600)/60);
                $sec = $ts % 60;
                return (($hr<10)?'0':'').$hr.(($min<10)?':0':':').$min .(($sec<10)?':0':':').$sec.'';
        }
*/	
         public function save() {
         	//When we Record then we need to check if that Chapter created starts with the H then we will 
         	//Mark it as HIdden chapter other wise it is not a hidden chapter
         	if($this->name) {
         		if( substr($this->name,0,1) == 'H' || substr($this->name,0,1) == 'h') {
					$this->ishidden = 1;
				} else {
         	 		$this->ishidden = 0;
				}
         	} else {
         		$this->ishidden = 0;
         	}
         	 parent::save();
         }
         
		public static function deformatTime($tt) {

            $secs = explode(':',$tt);
            $i=0;$s=0;
            while (count($secs)>0) {
                $s += array_pop($secs)*pow(60,$i);
                $i++;
            }
            return $s;

        }

        public static function formatTime($ts) {

                $hr = (int) floor($ts/3600);
                $min = (int) floor(($ts % 3600)/60);
                $sec = $ts % 60;
                return (($hr<10)?'0':'').$hr.(($min<10)?':0':':').$min .(($sec<10)?':0':':').$sec.'';
        }
        
 		public function setIsActive(){
    		//Dumuy varible created for tracking the selection of the records.
    	}
    	
		public function getIsActive(){
    		//Dumuy varible created for tracking the selection of the records.
    	}
    	
		/**
	     * Using for the multi delete and single delete.
	     * Calling from the markercuepoints-view
	     * @param unknown_type $data
	     */
	    public function deleteRecords($data){
	    	if (count($data)) 	{
	    		$keysArr = array();
	    		$keysArr = array_keys($data);
	    		foreach ($keysArr as $markerID){
	    			CuepointRecord::finder()->deleteByPk($markerID);
	    		}
	    	}
	    }
}
