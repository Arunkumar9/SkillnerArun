<?php
/**
 * Auto generated by prado-cli.php on 2009-12-13 01:51:36.
 */
class GalleryRecord extends GalleryAR implements FTypedActiveRecord
{

	const DETAIL_PAGE = 'GalleryDetailPage';
	protected $_typedata;

	/**
	 * Getter for property CoolUrl
	 * cool url for product
	 * @return string
	 */
	public function getCoolUrl() {

	    if ($this->cool_url)
		return $this->cool_url;
	    elseif (Prado::getApplication()->Parameters['translatable'])
		return FU::urlify($this->nameLangAct);
	    else
		return FU::urlify($this->name);

	}

	/**
	 * Setter for property CoolUrl
	 * cool url for product
	 * @param $value string
	 */
	public function setCoolUrl($value)
	{
		$this->cool_url = FU::urlify($value);
	}

	public function getCatID()
	{
		return sprintf('%03d',$this->uid).'-'.$this->getCoolUrl();
	}

        public static function finder($className=__CLASS__)
	{
		return parent::finder($className);
	}

	public function setNameLang($value,$culture)
	{
		$culture = strtolower($culture);
		$var = ($culture == 'cs') ? 'name' : 'name_'.$culture;
		if (property_exists($this,$var))
			$this->$var = $value;
		else
			$this->{'name_otherLang'.$culture} = $value;
	}

	public function getNameLang($culture)
	{
		$culture = strtolower($culture);
		$var = ($culture == 'cs') ? 'name' : 'name_'.$culture;
		if (property_exists($this,$var))
			return $this->$var;
		else
			return $this->{'name_otherLang'.$culture};
	}

	public function getAuthorDefault()
	{
		return ($this->author)?$this->author : Prado::getApplication()->User->Name;
	}

	public function setAuthorDefault($value)
	{
		$this->author = $value;
	}



	public function getType()
	{
		$types = TypeRecord::getTypes();
		return $types[self::DETAIL_PAGE];
	}

	public function getTypeData($inherit = false)
	{

		if ($this instanceof FTypedActiveRecord)
		{
			if ($this->_typedata === null)
			{
				$typeData = $this->getType()->data;
				$typeData['name'] = $this->type->name;
				$this->_typedata = $typeData;
			}
			return $this->_typedata;

		} else {
			return array();
		}
	}

	public function setTypeData($key, $value)
	{
		if ($this instanceof FTypedActiveRecord && $key)
		{
			$this->type->data[$key] = $value;
		}
	}

	public function unsetTypeData($key)
	{
		if ($this instanceof FTypedActiveRecord && $key)
		{
			unset($this->type->data[$key]);
		}
	}

	public function getHref($inherit = false,$par=array())
	{
		if ($this->getCatID())
		{
	   		$typeData = $this->getTypeData();
			$params  = (is_array($typeData['pageParams']))?$typeData['pageParams']:array();
			$params = array_merge($params,$par);
			$params['catid']=$this->getCatID();
			return Prado::getApplication()->getRequest()->constructUrl('page',$typeData['pagePath'],$params);
		}
		else
			return null;
	}

	public function getFirstImage()
	{
		if (($list = $this->ImagesList) && $list[0])
		{
			return $list[0]->uid;
		}
		return false;
	}

	public function getImagesList()
	{
		if ($this->images)
		{
			$images = json_decode($this->images);
			return $images;
		}
		return array();
	}

	public function getImagesRecords() {

                $images = json_decode($this->images,true);
		$result = array();
		if (count($images))
		{
			foreach($images as $image)
				$result[] = new NewsImagesRecord($image);
		}
		return $result;

        }

        public function getFirstImageAbsoluteUrl()
	{
	    $baseUrl = Prado::getApplication()->getRequest()->getBaseUrl();
	    return $baseUrl.'/'.$this->getFirstImage();
	}

	public function getDetailUrl()
	{
		$request = Prado::getApplication()->getRequest();
		$baseUrl = $request->getBaseUrl();
		return $baseUrl.$this->getHref();//$request->constructUrl('page',$pagePath,array('catid'=>$this->CatID));
	}

	public function getPlainDescription()
	{
	    return strip_tags($this->description);
	}

}