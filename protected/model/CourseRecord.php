<?php

/**
 * Auto generated by prado-cli.php on 2008-07-11 12:26:36.
 * Task/Issue      Author    			UniqueID        Comment   
 *--------------------------------------------------------------------------------------------------------------------------
 *  23903          Arunkumar.muddada    201312031856    Modified : saveToAvalton($force=false,$delete=false)
 *  														We are checking the description is giving null or not if it is giving null then we are passing the empty string
 *  														otherwise what ever the description has given that one only.
 *  														Earlier it was wokring fine ever though null has given as the values for the input.
 *  														So as a work around we are fixing this issue.
 *  27497          Arunkumar.muddada    201405070532    Added Method : getCourseContentsByOrder() 
 *  														This method is used to get the Course Content Details in the order of the Configuration we have Done
 *  														At CMS level Course Management Window.Prepare an array with key value pair as poisition : content_id of the lesson or quiz
 *  														throws FJsonException If we are not able to find the course content_id
 *  														So this is called by checking content_id is there or not for this courese
 *  													Modified : saveToAvalton()
 *  														if we have Configured course content records then only 
 *  														we send the data relate to order of the course coontent confired
 */
class CourseRecord extends ProductRecord {

    public $type=0;
    private $_finalize;
    private $_updateAvalton;
    private $_force;
    
    public static $RELATIONS = array
        (
        'categories' => array(self::MANY_TO_MANY, 'ContainerCategoryRecord', 'products_containers'),
        'contents' => array(self::MANY_TO_MANY, 'VideoRecord', 'products_videos'),
        'cc' => array(self::HAS_MANY, 'CourseContentRecord'), //, '(1=1) ORDER BY ordering'),
    );

    public static function finder($className=__CLASS__) {
        return parent::finder($className);
    }
    
    public function saveCategories() {
        $conn = $this->getDbConnection();
        $conn->setActive(true);
        $cmd = $conn->createCommand("DELETE FROM products_containers WHERE product_id = :prodid");
        $cmd->bindValue(':prodid', $this->content_id);
        $cmd->execute();
        foreach ($this->categories as $category) {
            $cmd = $conn->createCommand("INSERT IGNORE products_containers (product_id, container_id) VALUES (:prodid, :catid)");
            $cmd->bindValue(':prodid', $this->content_id);
            $cmd->bindValue(':catid', $category->uid);
            $cmd->execute();
        }
    }

    public function getContentIDs() {
        $list = array();
        foreach ($this->contents as $contents) {
            $list[] = (integer) $contents->content_id;
        }
        return $list;
    }

    public function setContentIDs($value) {
        if (is_array($value))
            $values  = implode(',',$value);

        $this->contents = VideoRecord::finder()->findAll("content_id IN($value)");
    }
    

    /**
     *  Saves the to DB.
     *  If content is finalized then it will not save
     *
     *  Sets some default in case user_id or content_id is not saved
     *
     *  Synchronizes with apiAvalton
     *  
     */
    public function save() {
    	    
    	     
    	     
        if ($this->checkFinalized()) return;
		

        $this->user_id  = (!$this->user_id) ? Prado::getApplication()->getUser()->username : $this->user_id;
        $this->content_id = ($this->content_id) ? $this->content_id : null;
        if ($this->content_id == null)
            $this->saveToAvalton();

        $this->saveToAvalton();
		
        $user = Prado::getApplication()->getUser();
    	if( empty($this->company_id) ){
    		
	        $this->company_id = $user->getCompanyID();
        }        
        
        parent::save();
    }
    
	/**
	*	Duplicates course with replacing course details that needs to be duplicated.
	*
	*/
	
	public function duplicateCourseRecord($data){
		
		
		// This method generate unique content id

	//	$this->saveToAvalton(true);
		
		//
		//	Inserts complete duplicated course data into products table.
		//
		
		$newcourserec = $this->insertCourseData($data);

		//
		//	Inserts associated lessons and quizes of course
		//
		
		$this->insertAssociatedCourseLessonsAndQuizes($data,$newcourserec);
		
		//
		//	Inserts associated tags information for the course.
		//
	
		$this->insertProductContainers($data,$newcourserec);

			
		return array("fromDuplicate" => true, "contentId"=>$newcourserec->content_id);
	}

	/**
	*	Inserts duplicated course data into products table with values of course, which is to be duplicated.
	*
	*/
	
	public function insertCourseData( $data ){
	
		// Getting the record by using content_id

		$courseRecord = ProductRecord::find( 'content_id = ?',$data['content_id'] );  

		$newCourseRec = new CourseRecord();
		
		$newCourseRec->name 				= 		$courseRecord->name." duplicate";
		$newCourseRec->price 				= 		$courseRecord->price;
		$newCourseRec->user_id 				= 		$courseRecord->user_id;
		$newCourseRec->main_category_id 	= 		$courseRecord->main_category_id;
		$newCourseRec->manufacturer_id 		= 		$courseRecord->manufacturer_id;
		$newCourseRec->default_image_id 	= 		$courseRecord->default_image_id;
		$newCourseRec->parent_id 			= 		$courseRecord->parent_id;
		$newCourseRec->is_enabled 			= 		$courseRecord->is_enabled;
		//$newCourseRec->content_id 			= 		$this->content_id;
		$newCourseRec->short_description 	= 		$courseRecord->short_description;
		$newCourseRec->description 			= 		$courseRecord->description;
		$newCourseRec->keywords 			= 		$courseRecord->keywords;
		$newCourseRec->date_created 		= 		$courseRecord->date_created;
		$newCourseRec->date_updated 		= 		$courseRecord->date_updated;
		$newCourseRec->url 					= 		$courseRecord->url;
		$newCourseRec->type 				= 		$courseRecord->type;
		$newCourseRec->vote_sum 			= 		$courseRecord->vote_sum;
		$newCourseRec->vote_count 			= 		$courseRecord->vote_count;
		$newCourseRec->rating 				= 		$courseRecord->rating;
		$newCourseRec->hits 				= 		$courseRecord->hits;
		$newCourseRec->minimum_quantity 	= 		$courseRecord->minimum_quantity;
		$newCourseRec->shipping_surcharge 	= 		$courseRecord->shipping_surcharge;
		$newCourseRec->is_separate_shipment = 		$courseRecord->is_separate_shipment;
		$newCourseRec->is_free_shipping 	= 		$courseRecord->is_free_shipping;
		$newCourseRec->is_back_orderable 	= 		$courseRecord->is_back_orderable;
		$newCourseRec->is_fractional_unit 	= 		$courseRecord->is_fractional_unit;
		$newCourseRec->shipping_weight 		= 		$courseRecord->shipping_weight;
		$newCourseRec->stock_count 			= 		$courseRecord->stock_count;
		$newCourseRec->reserved_count 		= 		$courseRecord->reserved_count;
		$newCourseRec->sales_rank 			= 		$courseRecord->sales_rank;
		$newCourseRec->ordering 			= 		$courseRecord->ordering;
		$newCourseRec->images 				= 		$courseRecord->images;
		$newCourseRec->is_new 				= 		true;
		$newCourseRec->is_recommended 		= 		$courseRecord->is_recommended;
		$newCourseRec->is_other_flag 		= 		$courseRecord->is_other_flag;
		$newCourseRec->icons 			= 		$courseRecord->icons;
		$newCourseRec->availability 		= 		$courseRecord->availability;
		$newCourseRec->cool_url 		= 		$courseRecord->cool_url;
		$newCourseRec->vat 			= 		$courseRecord->vat;
		$newCourseRec->company_id	 	= 		$courseRecord->company_id;
	
		$newCourseRec->setUpdateAvalton(true);	
		$newCourseRec->save();
		//var_dump($newCourseRec);
		return $newCourseRec;
		//return ( $newCourseRec->save() ? $newCourseRec : null ) ;
	}
	
	/**
	*	Inserts associated lessons and quizes of course, which is to be duplicated, into products_videos table.
	*
	*/
	
	public function insertAssociatedCourseLessonsAndQuizes( $data ,$newcourserec){
	
		$returnValue = false;
		
		$productVideos = CourseContentRecord::finder()->findAll( 'product_id = ?',$data['content_id'] );
			
		foreach( $productVideos as $productVideo ) {
			
			$courseContentRec = new CourseContentRecord();
			
			$courseContentRec->product_id 	= $newcourserec->content_id;
			$courseContentRec->video_id 	= $productVideo->video_id;
			$courseContentRec->uid 			= $newcourserec->content_id.'|'.$productVideo->video_id;
			$courseContentRec->ordering		= $productVideo->ordering;
			$courseContentRec->type			= $productVideo->type;

			$returnValue = $courseContentRec->save();
            if( $productVideo->type ==1 ){
               
                $oldQuizSettings = ProductQuizSettingsRecord::finder()->findAll('coursecontent_id = ?',array($productVideo->product_id.'|'.$productVideo->video_id));
                
                if( count($oldQuizSettings) > 0 ){
                     $newQuizSettings =  ProductQuizSettingsRecord::finder()->find('coursecontent_id=?',array($courseContentRec->uid));
                    // $newQuizSettings->copyFrom( $oldQuizSettings[0]);
                   $newQuizSettings->requiredpass = $oldQuizSettings[0]->requiredpass ;
                   $newQuizSettings->passing_score = $oldQuizSettings[0]->passing_score ;
                   $newQuizSettings->required_subsequent = $oldQuizSettings[0]->required_subsequent ;
                   $newQuizSettings->randomize_questions = $oldQuizSettings[0]->randomize_questions ;
                   $newQuizSettings->post_evaluation = $oldQuizSettings[0]->post_evaluation ;
                    
                    
                    $newQuizSettings->save();
                    $oldAssociations = ProductQuizLessonAssociationRecord::finder()->findAll('quiz_settings_id=?',array($oldQuizSettings[0]->uid));
                   
                    foreach( $oldAssociations as $oldAssociation){
                        
                        $newAssociation =  ProductQuizLessonAssociationRecord::finder()->find('quiz_settings_id= ? AND lesson_id = ? ',array( $newQuizSettings->uid,$oldAssociation->lesson_id));
                        if( empty( $newAssociation)){
                            $newAssociation = new ProductQuizLessonAssociationRecord();
                            $newAssociation->lesson_id = $oldAssociation->lesson_id;
                        }
                        // $newAssociation->copyFrom($oldAssociation);
                        
                        $newAssociation->required_complete = $oldAssociation->required_complete;
                        $newAssociation->markunviewed = $oldAssociation->markunviewed;
                        $newAssociation->quiz_settings_id = $newQuizSettings->uid;
                        $newAssociation->save();
                    }
                }

            } else if($productVideo->type ==0){
            	$oldLessonSettings = ProductLessonSettingRecord::finder()->findAll('course_id = ? ORDER BY order',array($data['content_id']));
                
                if( count($oldLessonSettings) > 0 ){
                	for ($i =0 ; $i < count($oldLessonSettings) ; $i++){
                		$newLessonSettings = new ProductLessonSettingRecord();
                		$newLessonSettings->course_id = $newcourserec->content_id;
                		$newLessonSettings->lesson_id = $oldLessonSettings[$i]->lesson_id;
                		if($oldLessonSettings[$i]->content_id != null){
                			$newLessonSettings->content_id = $oldLessonSettings[$i]->content_id;
                		}
                		$newLessonSettings->setting_name = $oldLessonSettings[$i]->setting_name;
                		$newLessonSettings->setting_value = $oldLessonSettings[$i]->setting_value;
                		$newLessonSettings->order = $oldLessonSettings[$i]->order;
                		$newLessonSettings->type = $oldLessonSettings[$i]->type;
                		$newLessonSettings->save();
                	}
                }
            }
		}
		
		return $returnValue;
	}
	
	/**
	*	Inserts associated tags information for the course.
	*
	*/
	
	public function insertProductContainers( $data ,$newcourserec){
	
		$conn = $this->getDbConnection();
		$conn->setActive(true);
	
		// Get the contained id from products_containers table

		 $cmd = $conn->createCommand("SELECT `container_id`
			  FROM `products_containers`
			 WHERE `product_id` = ".$data['content_id']."");

		$dataReader=$cmd->query();          // execute a query SQL
		$rows=$dataReader->readAll();

		// Inserting the duplicate data in to products_containers table ( For tags )

		for( $i=0;$i<count($rows);$i++ ){
			
			$cmd = $conn->createCommand("SET FOREIGN_KEY_CHECKS = 0;");

			$cmd->execute();

			$cmd = $conn->createCommand("INSERT INTO `products_containers` (`product_id`,`container_id`) VALUES ('".$newcourserec->content_id."','".$rows[$i]['container_id']."')");

			$cmd->execute();	
		}
	}

    public function deleteNotFinished($data) {
        
        foreach($data as $key) {
            
            $rec = $this->find('content_id = ?', $key['content_id']);            
            if (!$rec)
                throw new FJsonException('Error no. 1');
            if ($rec->is_finished && !$key['force'])
                throw new FJsonException('Error no. 2');

            /*foreach($this->contents as $content) {
                if ($content->is_finished)
                    throw new FJsonException('Error no. 3');
            }*/
            $rec->saveToAvalton(true,true);
            return $rec->delete();            
        }
    }
    
    /**
     * Checks if the course and its content is finalize (ie locked for changes)
     *   
     *  @return bool  false if not yet finalized (or "force=true" came from Avalton),
     *                true if already finalized (so not to be saved)
     *
     *  @exception  FJsonException if the course is to be finalized ($this->_finalize=1) and either $this->content_id is not set or
     *              some of the content is not finalized yet
     */         
     protected function checkFinalized() {
     	     
     	      
        if ($this->is_finished) return !$this->getForce();
        
       
        
        if ($this->_finalize) {
            if (!$this->content_id)
                throw new FJsonException ('Please save the course first.');
                
            $nf = array();
            foreach($this->contents as $content) {
                if (!$content->is_finished)
                    $nf[] = $content->name;
                
                if (!empty($nf))
                        throw new FJsonException ("All content (lessons and quizzes) must be finalized before finalizing the course.");
            }
            
            $this->is_finished = 1;
        }
        return false;
    }
    
    public function setFinalized($value) {
        $this->_finalize =  $value;
    }

    public function getFinalized() {
        return $this->is_finished;
    }  
 
    public function getFilesize(){
        $f = 0;
        foreach ($this->contents as $c) {
            $f = $f + $c->getFileSize();
        }
        //$this->icons = $f; $this->save();
        return $f;
    }
    
    public static function getCourseSearchContextSql(){
    	
    	$filterArr =  Prado::getApplication()->Request['filter'];
    	$tagsArr =  Prado::getApplication()->Request['tags'];
    	$qs = '';
    	if( $filterArr ){
    		$filterArr =json_decode($filterArr,true);
    		if (!is_array($filterArr ))
    			$filterArr = array($filterArr);
			foreach($filterArr as $k => $v)
	    		if ($v)
	    		{
	    			$w = str_replace('*','%',$v);
	    			$condition[] = "($k like '$w')";
	    		}
    		if (count($condition)>0)
   				$conditions = '('.implode(' OR ', $condition ).')';
   				$qs = $qs.$conditions.' AND ';
    	}
    	
    	if($tagsArr){
    		
    		$arr = explode(",", $tagsArr);
    		$qs = $qs.str_replace("\n"," "," (''='$tagsArr' OR content_id IN(SELECT pcf.product_id FROM products_containers pcf");
    		
    		foreach($arr as $k => $v)
	    		if ($v)
	    		{
	    			$tcondition[] = " INNER JOIN products_containers pc$k on pcf.product_id = pc$k.product_id and pc$k.container_id ='$v' ";
	    		}
    		if (count($tcondition)>0)
   				$tcondition = implode(' ', $tcondition );
   				$qs = $qs.$tcondition.' WHERE (CASE WHEN (SELECT count(product_id) FROM `products_containers` pcl Where pcf.product_id = pcl.product_id group by product_id ) >= '.count($arr).' THEN 1=1 ELSE 1=2 END) ) ) AND ';
    	}
    	
   		$qs = $qs.self::getNoContextSql();
   		return $qs;
    }
    
    public static function getContextSql() {
    	
        $user = Prado::getApplication()->getUser()->username;
    	$filter =  Prado::getApplication()->Request['filter'];
    	$filterText =  Prado::getApplication()->Request['searchtext'];
    	$qs = '';
    	if( $filterText ){
    		
			$qs = $qs."( ( content_id like '$filterText' ) OR ( name like '$filterText' ) OR ( is_finished like '$filterText' ) ) AND ";    	
    	}
    	if($filter){
    		
    		$arr = explode(",", $filter);
    		$qs = $qs.str_replace("\n"," "," (''='$filter' OR content_id IN(SELECT pcf.product_id FROM products_containers pcf");
    		foreach($arr as $k => $v)
	    		if ($v)
	    		{
	    			$tcondition[] = " INNER JOIN products_containers pc$k on pcf.product_id = pc$k.product_id and pc$k.container_id ='$v' ";
	    		}
    		if (count($tcondition)>0)
   				$tcondition = implode(' ', $tcondition );
   				$qs = $qs.$tcondition.' WHERE (CASE WHEN (SELECT count(product_id) FROM `products_containers` pcl Where pcf.product_id = pcl.product_id group by product_id ) >= '.count($arr).' THEN 1=1 ELSE 1=2 END) ) ) AND ';
    	}
   		$qs = $qs.self::getNoContextSql();
   		return $qs;
    }
    
    public static function getNoContextSql() {
        $user = Prado::getApplication()->getUser();
        return "is_enabled >0 ".($user->getCompanyID() != null ? (' AND (company_id ='. $user->getCompanyID().')') : ' AND 1=2');
    }
    
   public static function getTagNoContextSql() {
        $user = Prado::getApplication()->getUser();
        //Here If the User Have Company ID Then we will show the tags related to that company and the user created for him self.
        //if user does not have the compnay id then we will show the tags related to him only.
        return "type_id like 'CategoryPage' AND parent_id = 20 ".($user->getCompanyID() != null ? (' AND (company_id ='. $user->getCompanyID().' OR user_id ='.$user->getUid().')') : (' AND user_id = '.$user->getUid() ));
    }
	/**
     * Checks if all the course contents are final or not
     *   
     *  @return bool  by default this method return true and it return false if at least one content is not final.
     */   
	 protected function allContentsAreFinal() {
	    $allContentsFinal = true;
		foreach($this->contents as $content) {
			if ( $content->is_finished == 0 ) {
				$allContentsFinal = false;
				break;
			}
		}
        return $allContentsFinal;
    }

    public function getSecurityView()
    {
         $user = Prado::getApplication()->getUser();
         if ( $this->is_finished ) {
                $s = new stdClass();
                $s->name = "CourseRecord.course-form-save-button.disable";
                $sec[] = $s;
                $s = new stdClass();
                $s->name = "CourseRecord.course-form-finalize-button.disable";
                $sec[] = $s;
                $s = new stdClass();
                $s->name = "CourseRecord.course-form-cancel-button.disable";
                $sec[] = $s;
                return $sec;
         }
         else {
                $s = new stdClass();
                $s->name = "CourseRecord.course-form-save-button.enable";
                $sec[] = $s;
                $s = new stdClass();
				//if ( $this->allContentsAreFinal() ) {
				     $s->name = "CourseRecord.course-form-finalize-button.enable";
				//} else {
				 ////   $s->name = "CourseRecord.course-form-finalize-button.disable";
				//}
                
                $sec[] = $s;
                $s = new stdClass();
                $s->name = "CourseRecord.course-form-cancel-button.enable";
                $sec[] = $s;
                return $sec;
         }
         return parent::getSecurityView();
    }

    /**
     * This method is used to save the course (product) information with avalton API
     * When ever there is a change in the course window at CMS level and user 
     * clicked on save button or delete button we are preparing the information
     * and sending to the Avalton
     * @param unknown_type $force
     * @param unknown_type $delete
     * @throws FJsonException
     */
    public function saveToAvalton($force=false,$delete=false) {
		
    	if ($force || $this->getUpdateAvalton()) {
        	
    		//201405070532
        	$courseContentInfo = $this->getContentIDs();
        	
        	//if we have Configured course content records then only 
        	//we send the data relate to order of the course coontent confired
			if(!empty($courseContentInfo)){		
        			$courseContentInfo = $this->getCourseContentsByOrder();
			}
        	
			//We are checking the description is giving null or not if it is giving null then we are passing the empty string
			//otherwise what ever the description has given that one only.
			//Earlier it was wokring fine ever though null has given as the values for the input.
			//So as a work around we are fixing this issue.
			//201312031856
            $rows = array(
                            'contenttype' => str_replace(array('grouprecord','record'),'',strtolower(get_class($this))),
                            'action' => ($this->is_finished) ? 'finalize' : 'edit',
                            'data'=>array( 'id'=> (int) $this->content_id,
                                           'name'=>$this->name,
                                           'desc'=>$this->description != null ? $this->description : "" ,
                                           'filesize'=>(int) $this->getFilesize(),
                                           'contentids'=>$courseContentInfo
                                        )
                            
            );
            
            if ($delete) {
                $rows['action'] = 'delete';
                $rows['data']['creator_id'] = $this->getUsername();
                $res = VideoRecordMgr::apiAvalton('content_creator.php',array('rows' => json_encode($rows)));
            }
            elseif (!$this->content_id) {
                $rows['action'] = 'add';
                $rows['data']['creator_id'] = $this->getUsername();
                //unset($rows['data']['id']);
                $res = VideoRecordMgr::apiAvalton('content_creator.php',array('rows' => json_encode($rows)));
//                echo "[".json_encode($rows).",".json_encode($res)."]";die();
                $this->content_id = $res['data']['id'];
                if (!$this->content_id)
                    throw new FJsonException ('Cannot get content_id.'+json_encode($res));
                $this->updateByPk(array('content_id'=>$this->content_id),$this->uid);
            }
            else {
                $res = VideoRecordMgr::apiAvalton('content_creator.php',array('rows' => json_encode($rows)));
            }
            
            if (stripos($res['status'],'error')!==false) {//&& Prado::getApplication()->getMode() == TApplication::STATE_DEBUG)
                throw new FJsonException('api Avalton error: '."[".json_encode($rows).",".json_encode($res)."]");
            }
            
        }
    }
    
    /**
     * This method is used to get the Course Content Details in the order of the Configuration we have Done
     * At CMS level Course Management Window.
     * Prepare an array with key value pair as poisition : content_id of the lesson or quiz
     * @throws FJsonException If we are not able to find the course content_id 
     * So this is called by checking content_id is there or not for this courese
     * 201405070532
     */
    public function getCourseContentsByOrder(){
    	$courseContentList = array();
    	
    	if (!$this->content_id){
             throw new FJsonException ('Cannot get content_id.'+json_encode($res));
    	}
    	$contentInfo  = CourseContentRecord::finder()->findAll('product_id = ? ORDER BY ordering ASC',array($this->content_id));
    	if(count($contentInfo) > 0){
    		$i = 1;
    		foreach($contentInfo as $courseContentRec){
				$courseContentList[$i] = $courseContentRec->video_id; 
				$i++;   			
    		}
    	}
    	return $courseContentList;
    }
    
    public function getUpdateAvalton() {
        return $this->_updateAvalton;
    }

    public function setUpdateAvalton($value) {
        $this->_updateAvalton = $value;
    }
    
    /**
     * TEMPORARY
     */
    protected function getUsername() {
        $user = Prado::getApplication()->getUser();
        return  ($user->username == 'super')  ? '15' : $user->username;
    }

    protected function getContentChanged() {
        return 0;
    }
    protected function setContentChanged($value) { }
   
    protected function getForce() {
        return $this->_force;
    }
    protected function setForce($value) { $this->_force = (bool) $value; }
    
    protected function getCompany_id() {
    	return $this->parent_id;
    }
    protected function setCompany_id($value) {
    	$this->parent_id = $value;
    }
   
}
