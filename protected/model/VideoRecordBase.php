<?php

/**
 * Auto generated by prado-cli.php on 2008-07-11 12:26:36.
 */
Prado::using('Application.model.VideoAR');
class VideoRecordBase extends VideoAR implements FTypedActiveRecord {
    const DETAIL_PAGE = 'VideoDetailPage';
    protected $_typedata;
    protected $_update_categories;

    /**
     * Getter for property CoolUrl
     * cool url for product
     * @return string
     */
    public function getCoolUrlName() {
		SWPLogManager::log("Getting cool url name",null,TLogger::INFO,$this,"getCoolUrlName","SWP");
        if ($this->cool_url){
			SWPLogManager::log("Returns cool url name",$this->cool_url,TLogger::INFO,$this,"getCoolUrlName","SWP");        	
            return $this->cool_url;
        }
        elseif (Prado::getApplication()->Parameters['translatable']){
			SWPLogManager::log("Returns result",FU::urlify($this->nameLangAct),TLogger::INFO,$this,"getCoolUrlName","SWP");        	
            return FU::urlify($this->nameLangAct);
        }
        else{
        	SWPLogManager::log("Returns url name",FU::urlify($this->name),TLogger::INFO,$this,"getCoolUrlName","SWP");
            return FU::urlify($this->name);
        }
    }

    /**
     * Setter for property CoolUrl
     * cool url for product
     * @param $value string
     */
    public function setCoolUrlName($value) {
    	SWPLogManager::log("Set cool url name",array('data'=>$value),TLogger::INFO,$this,"setCoolUrlName","SWP");
        $this->cool_url = $value;
    }

    public function getCatID() {
    	SWPLogManager::log("Get cat id",null,TLogger::INFO,$this,"getCatID","SWP");
        //return sprintf('%03d', $this->uid) . '-' . $this->getCoolUrlName();
        $c =  ($this->cool_url) ? $this->cool_url : sprintf('%03d', $this->uid) . '-' . $this->getCoolUrlName();
        SWPLogManager::log("Returs cat record",$c,TLogger::INFO,$this,"getCatID","SWP");
        return $c;

    }

    public static $RELATIONS = array
        (
        'categories' => array(self::MANY_TO_MANY, 'CategoryRecord', 'products_categories'),
        'terms' => array(self::HAS_MANY, 'TermRecord')
    );

    public static function finder($className=__CLASS__) {
        return parent::finder($className);
    }

    public function getChildren() {
        return false;
    }

    public function save() {
        parent::save();
        if ($this->updateCategories)
            $this->saveCategories();
    }

    public function getUpdateCategories() {
        return $this->_update_categories;
    }

    public function setUpdateCategories($value) {
        $this->_update_categories = TPropertyValue::ensureBoolean($value);
    }

    public function saveCategories() {
    	SWPLogManager::log("Save category",null,TLogger::INFO,$this,"saveCategories","SWP");
    	$conn = $this->getDbConnection();
    	$conn->setActive(true);
    	$cmd = $conn->createCommand("DELETE FROM products_categories WHERE product_id = :prodid");
    	$cmd->bindValue(':prodid', $this->uid);
    	$cmd->execute();
    	foreach ($this->categories as $category) {
    		$cmd = $conn->createCommand("INSERT IGNORE products_categories(product_id, category_id) VALUES (:prodid, :catid)");
    		$cmd->bindValue(':prodid', $this->uid);
    		$cmd->bindValue(':catid', $category->uid);
    		SWPLogManager::log("save the categories associated",array("category"=>$category),TLogger::DEBUG,$this,"saveCategories","SWP");
    		$cmd->execute();
    	}
    }

    public function getCategoriesList() {
    	SWPLogManager::log("Get category list",null,TLogger::INFO,$this,"getCategoriesList","SWP");
        $list = array();
        foreach ($this->categories as $category) {
            $list[] = (integer) $category->uid;
        }
        SWPLogManager::log("Return the category list associated",array("category_list"=>$list),TLogger::INFO,$this,"getCategoriesList","SWP");
        return $list;
    }

    public function getFirstImage() {
    	
    	SWPLogManager::log("Get first image",null,TLogger::INFO,$this,"getFirstImage","SWP");
    	if (($list = $this->ImagesList) && $list[0]) {

    		//var_dump($list); die();
    		SWPLogManager::log("returns the first image from the list of images",array("first_image_uid"=>$list[0]),
    		TLogger::INFO,$this,"getFirstImage","SWP");
    		return $list[0]->uid;
    	}
    	return false;
    }

    public function getImagesList() {
    	SWPLogManager::log("Getting image list",null,TLogger::INFO,$this,"getImagesList","SWP");
    	if ($this->images) {
    		$images = json_decode($this->images);
    		SWPLogManager::log("returns the complete Image list",array("images"=>$images),TLogger::INFO,$this,"getImagesList","SWP");
    		return $images;
    	}
    	return array();
    }

    public function getImagesRecords() {
		SWPLogManager::log("Getting image records",null,TLogger::INFO,$this,"getImagesRecords","SWP");
        $images = json_decode($this->images, true);
        $result = array();
        if (count($images)) {
            foreach ($images as $image)
                $result[] = new NewsImagesRecord($image);
        }
        SWPLogManager::log("Returns the total images Records ",array("result"=>$result),TLogger::INFO,$this,"getImagesRecords","SWP");
        return $result;
    }

    public function setCategoriesList($value) {
    	SWPLogManager::log("Set category list",array("data"=>$value),TLogger::INFO,$this,"setCategoriesList","SWP");
        $this->categories = array();
        $this->categories = CategoryRecord::finder()->findAllByPks($value);
        SWPLogManager::log("Save the category list into DB",array("category"=>$this->categories),TLogger::INFO,$this,"setCategoriesList","SWP");
    }

    public function getType() {
        $types = TypeRecord::getTypes();
        SWPLogManager::log("Return Type",$types[self::DETAIL_PAGE],TLogger::INFO,$this,"getType","SWP");
        return $types[self::DETAIL_PAGE];
    }

    public function getTypeData($inherit = false) {
		SWPLogManager::log("Get Type data",array("data"=>$inherit),TLogger::INFO,$this,"getTypeData","SWP");
        if ($this instanceof FTypedActiveRecord) {
            if ($this->_typedata === null) {
                $typeData = $this->getType()->data;
                $typeData['name'] = $this->type->name;
                $this->_typedata = $typeData;
            }
            SWPLogManager::log("Return Type data",$this->_typedata,TLogger::INFO,$this,"getTypeData","SWP");
            return $this->_typedata;
        } else {
        	SWPLogManager::log("Return empty array if type data not  present",array(),TLogger::INFO,$this,"getTypeData","SWP");
            return array();
        }
    }

    public function setTypeData($key, $value) {
    	SWPLogManager::log("Set Type data",array("Key"=>$key, "Value"=>$value),TLogger::INFO,$this,"setTypeData","SWP");
        if ($this instanceof FTypedActiveRecord && $key) {
            $this->type->data[$key] = $value;
        }
    }

    public function unsetTypeData($key) {
    	SWPLogManager::log("Unset Type data",array("Key"=>$key),TLogger::INFO,$this,"unsetTypeData","SWP");
        if ($this instanceof FTypedActiveRecord && $key) {
            unset($this->type->data[$key]);
        }
    }

    public function getHref($inherit = false, $par=array()) {
    	SWPLogManager::log("Get href",array("Inherit"=>$inherit, "Par"=>$par),TLogger::INFO,$this,"getHref","SWP");
        if ($this->getCatID()) {
            $typeData = $this->getTypeData();
            $params = (is_array($typeData['pageParams'])) ? $typeData['pageParams'] : array();
            $params = array_merge($params, $par);
            $params['catid'] = $this->getCatID();
            $res = Prado::getApplication()->getRequest()->constructUrl('page', $typeData['pagePath'], $params);
            SWPLogManager::log("Returns get href",$res,TLogger::INFO,$this,"getHref","SWP");
            return $res;
        }
        else
            return null;
    }

    public function getFirstImageAbsoluteUrl() {
        $baseUrl = Prado::getApplication()->getRequest()->getBaseUrl();
        SWPLogManager::log("Returns first image absolute url",$baseUrl . '/' . $this->getFirstImage(),TLogger::INFO,$this,"getFirstImageAbsoluteUrl","SWP");
        return $baseUrl . '/' . $this->getFirstImage();
    }

    public function getDetailUrl() {
    	SWPLogManager::log("Get detail url",null,TLogger::INFO,$this,"getDetailUrl","SWP");
        $request = Prado::getApplication()->getRequest();
        $baseUrl = $request->getBaseUrl();
        $res = $baseUrl . $this->getHref();
        SWPLogManager::log("Returns detail url",$res,TLogger::INFO,$this,"getDetailUrl","SWP");
        return $res;  //$request->constructUrl('page',$pagePath,array('catid'=>$this->CatID));
    }

    public function getPlainDescription() {
    	SWPLogManager::log("Returns plain description",strip_tags($this->description),TLogger::INFO,$this,"getPlainDescription","SWP");
        return strip_tags($this->description);
    }

}

?>