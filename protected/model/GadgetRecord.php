<?php
/**
 * Auto generated by prado-cli.php on 2009-12-13 01:51:36.
 */
class GadgetRecord extends GadgetAR implements FTypedActiveRecord
{

	protected $_typedata;
	protected $_update_categories;
        public static $RELATIONS=array
	(
		'categories'=>array(self::MANY_TO_MANY, 'CategoryRecord', 'gadgets_categories'),
    );



        public static function finder($className=__CLASS__)
	{
		return parent::finder($className);
	}

	public function getAuthorDefault()
	{
		return ($this->author)?$this->author : Prado::getApplication()->User->Name;
	}

	public function setAuthorDefault($value)
	{
		$this->author = $value;
	}



	public function getType()
	{
		$types = TypeRecord::getTypes();
		return $types[self::DETAIL_PAGE];
	}

	public function getTypeData($inherit = false)
	{

		if ($this instanceof FTypedActiveRecord)
		{
			if ($this->_typedata === null)
			{
				$typeData = $this->getType()->data;
				$typeData['name'] = $this->type->name;
				$this->_typedata = $typeData;
			}
			return $this->_typedata;

		} else {
			return array();
		}
	}

	public function setTypeData($key, $value)
	{
		if ($this instanceof FTypedActiveRecord && $key)
		{
			$this->type->data[$key] = $value;
		}
	}

	public function unsetTypeData($key)
	{
		if ($this instanceof FTypedActiveRecord && $key)
		{
			unset($this->type->data[$key]);
		}
	}

	public function getHref($inherit = false,$par=array())
	{
		if ($this->getCatID())
		{
	   		$typeData = $this->getTypeData();
			$params  = (is_array($typeData['pageParams']))?$typeData['pageParams']:array();
			$params = array_merge($params,$par);
			$params['catid']=$this->getCatID();
			return Prado::getApplication()->getRequest()->constructUrl('page',$typeData['pagePath'],$params);
		}
		else
			return null;
	}

	public function getFirstImage()
	{
		if (($list = $this->ImagesList) && $list[0])
		{
			return $list[0]->uid;
		}
		return false;
	}

	public function getSecondImage()
	{
		if (($list = $this->ImagesList) && $list[1])
		{
			return $list[1]->uid;
		}
		return $this->getFirstImage();
	}

        public function getImagesList()
	{
		if ($this->images)
		{
			$images = json_decode($this->images);
			return $images;
		}
		return array();
	}

	public function getImagesRecords() {

                $images = json_decode($this->images,true);
		$result = array();
		if (count($images))
		{
			foreach($images as $image)
				$result[] = new NewsImagesRecord($image);
		}
		return $result;

        }

        public function getFirstImageAbsoluteUrl()
	{
	    $baseUrl = Prado::getApplication()->getRequest()->getBaseUrl();
	    return $baseUrl.'/'.$this->getFirstImage();
	}

	public function getUpdateCategories()
	{
		return $this->_update_categories;
	}

 	public function setUpdateCategories($value)
	{
		$this->_update_categories = TPropertyValue::ensureBoolean($value);
	}


    public function saveCategories()
    {
		$conn = $this->getDbConnection();
        $conn->setActive(true);
        $cmd = $conn->createCommand("DELETE FROM gadgets_categories WHERE product_id = :prodid");
        $cmd->bindValue(':prodid', $this->uid);
        $cmd->execute();
        foreach ($this->categories as $category)
        {
	        $cmd = $conn->createCommand("INSERT IGNORE gadgets_categories(product_id, category_id) VALUES (:prodid, :catid)");
	        $cmd->bindValue(':prodid', $this->uid);
	        $cmd->bindValue(':catid', $category->uid);
	        $cmd->execute();
		}
    }

	public function getCategoriesList()
	{
		$list = array();
		foreach($this->categories as $category)
		{
			$list[] = (integer) $category->uid;
		}
		return $list;
	}

	public function setCategoriesList($value)
	{
		$this->categories = array();
		$this->categories = CategoryRecord::finder()->findAllByPks($value);
	}

    public function save()
    {
		parent::save();
		if ($this->updateCategories)
			$this->saveCategories();
    }

    public function getLink($n=1)
    {
        $url = $this->{'url'.$n};
        if (preg_match('/^(http|https|ftp):\/\//',$url))
                return $url;

        if ($c = Prado::getApplication()->getModule('cms')->getContainer($url))
                return $c->getAbsoluteHref();

        return '#';
    }

    public function getGsel()
    {
        return ($this->FirstImage)?'g'.$this->uid:'g-text';
    }

}