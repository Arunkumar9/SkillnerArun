<?php

/**
 * Auto generated by prado-cli.php on 2008-07-11 12:26:36.
 */
class ProductRecord extends ProductRecordBase {

    const PRICES_WITH_VAT=1;
    const RELPROD = 'uid IN (SELECT uid FROM products_has_products dd1 WHERE dd1.products_id = :relid
                                 UNION
                                 SELECT products_id as uid FROM products_has_products dd2 WHERE dd2.uid = :uid) ';

    private $_groupedVariants;
    private $_defaultVariants;
    private $_currentVariants;
    private $_current_price;
    public $products_id;
    private $_myrelatedproducts;
    
    public static $RELATIONS = array
        (
        'categories' => array(self::MANY_TO_MANY, 'ContainerCategoryRecord', 'products_containers'),
        'relatedproducts' => array(self::MANY_TO_MANY, 'ProductRecord', 'products_has_products.products_id'),
        'variants' => array(self::HAS_MANY, 'AttributeRecord', 'product_id', '(is_enabled>0 AND discr="variant" AND is_default>0) ORDER BY ordering ASC'),
        'attributes' => array(self::HAS_MANY, 'AttributeRecord', 'product_id', '(is_enabled>0 AND (discr="attribute")) ORDER BY ordering ASC')
    );

    public static function finder($className=__CLASS__) {
        return parent::finder($className);
    }

    /* public function getCatID()
      {
      return sprintf('%03d',$this->uid).'-'.FU::urlify($this->name);
      } */

       public function getRelatedProducts()
        {
            if ($this->_myrelatedproducts === null)
            {
                $cri = new TActiveRecordCriteria;
                $cri->Condition = self::RELPROD;
                $cri->Parameters[':uid'] = $this->uid;
                $cri->Parameters[':relid'] = $this->uid;
                $this->_myrelatedproducts = ProductRecord::finder()->findAll($cri);
            }
            return $this->_myrelatedproducts;
        }
       

    public function getGroupedVariants() {

        if ($this->_groupedVariants === null) {
            $cri = new TActiveRecordCriteria();
            $cri->Condition = 'product_id = :uid AND discr="variant" GROUP BY definition_uid';
            $cri->OrdersBy['definition_uid'] = 'ASC';
            $cri->OrdersBy['ordering'] = 'ASC';
            $cri->Parameters[':uid'] = $this->uid;
            $this->_groupedVariants = AttributeRecord::finder()->findAll($cri);

            //die(TVarDumper::dump($this->_groupedVariants));
        }
        return $this->_groupedVariants;
    }


    public function setNameLang($value, $culture) {
        $culture = strtolower($culture);
        $var = ($culture == 'cs') ? 'name' : 'name_' . $culture;
        if (property_exists($this, $var))
            $this->$var = $value;
        else
            $this->{'name_otherLang' . $culture} = $value;
    }

    public function getNameLang($culture) {
        $culture = strtolower($culture);
        $var = ($culture == 'cs') ? 'name' : 'name_' . $culture;
        if (property_exists($this, $var))
            return $this->$var;
        else
            return $this->{'name_otherLang' . $culture};
    }

    public function getPriceLang($culture) {
        $culture = strtolower($culture);
        if ($culture == 'cs')
            return $this->price;

        $currency = Prado::getApplication()->Globalization->Currency;

        if ($culture == 'sk' && $this->price_sk > 0)
            return round($this->price_sk, $currency->precision);



        if ($currency)
            return round($this->price * $currency->conversion, $currency->precision);
        else
            return $this->price;
    }

    public function getCurrencyName($culture=null) {
        $currency = Prado::getApplication()->Globalization->getCurrency($culture);
        if ($currency)
            return $currency->currency_local;
        else
            return 'Kč';
    }

    public function getCalculatedVariantPrice($force=false)
    {

        if ($force || $this->_current_price === null)
        {
            $price = 0; $addon=0; $coef = 1;
            foreach ($this->getCurrentVariants() as $k => $variant) {
                    if ($variant->price>0)
                        $price  =  $variant->price;
                    $addon  += $variant->price_add;
                    $coef = ($variant->price_coef>0)? $coef*$variant->price_coef : $coef;

                    Prado::trace($variant->uid.' PRICE FIX '.$price.' '.$addon.' '.$coef,'Json');

            }
            $this->_current_price = ($price>0) ? $price*$coef : $this->price*$coef;
            $this->_current_price = ($this->_current_price>0) ? $this->_current_price + $addon : 0;
        }
        return $this->_current_price;

    }


    public function getPriceWithVAT() {
        $price = $this->getCalculatedVariantPrice();
        return (self::PRICES_WITH_VAT) ? $price : round($price*(1+$this->vat/100));
    }

    public function getPriceWithoutVAT() {
        $price = $this->getCalculatedVariantPrice();
        return (!self::PRICES_WITH_VAT) ? $price : round($price/(1+$this->vat/100));
    }


    /**
     *
     * @return AttributeRecor[]
     */
    public function getCurrentVariants() {
        if ($this->_currentVariants)
            return $this->_currentVariants;
        else
            return $this->getDefaultVariants();
    }

    public function setCurrentVariants($value) {
        $this->_currentVariants = $value;
    }

    public function getDefaultVariants() {
        if (!$this->_defaultVariants) {
            $this->_defaultVariants = $this->variants;
        }
        return $this->_defaultVariants;
    }

    public function getIconsRecords() {
        $icons = explode('|', $this->icons);
        return IconRecord::finder()->findAllByPks($icons);
    }

    public function getFirstImage() {
        //
        $fi = parent::getFirstImage();
        if (!$fi)
            return Prado::getApplication()->Parameters['defaultNoImage'];
        else
            return $fi;
    }


    public function saveCategories() {
        $conn = $this->getDbConnection();
        $conn->setActive(true);
        $cmd = $conn->createCommand("DELETE FROM products_containers WHERE product_id = :prodid");
        $cmd->bindValue(':prodid', $this->uid);
        $cmd->execute();
        foreach ($this->categories as $category) {
            $cmd = $conn->createCommand("INSERT IGNORE products_containers (product_id, container_id) VALUES (:prodid, :catid)");
            $cmd->bindValue(':prodid', $this->uid);
            $cmd->bindValue(':catid', $category->uid);
            $cmd->execute();
        }
    }

    public function getCategoriesList() {
        $list = array();
        foreach ($this->categories as $category) {
            $list[] = (integer) $category->uid;
        }
        return $list;
    }

    public function setCategoriesList($value) {
        $this->categories = array();
        $this->categories = ContainerCategoryRecord::finder()->findAllByPks($value);
    }

	/**
	 * Getter for property CoolUrl
	 * cool url for product
	 * @return string
	 */
	public function getCoolUrlName() {

	    if ($this->cool_url)
		return $this->cool_url;
	    elseif (Prado::getApplication()->Parameters['translatable'])
		return FU::urlify($this->nameLangAct);
	    else
		return FU::urlify($this->name);

	}

	/**
	 * Setter for property CoolUrl
	 * cool url for product
	 * @param $value string
	 */
	public function setCoolUrlName($value) {
	    $this->cool_url = $value;
	}

        public function save()
        {
            parent::save();
            //if ($this->getUpdateCategories())
                $this->saveRelation('relatedproducts');
        }
}
